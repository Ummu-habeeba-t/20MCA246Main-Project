    <!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">

// Name of items should start with program no. there is no way to get it otherwise
/*--------------------------------Class Utils -------------------------------------*/
class JIUtils {
   Button = true ;
   ButtEsc= false;

   ColIndv = ["black","lightGray","blue","magenta","cyan","orange","darkGray",
      "pink","gray","red","green","white","yellow"];

   Pair = {Id:"Fiat", Fgc:"500", Bgc:"white"};   
   ColPair = [];

   constructor() {
      this.Button  = true;
      this.ButtEsc = false;
      this.Define_Pair("NORMAL" , 0 , 11); 
      this.Define_Pair("ENTRY"  , 0 , 11); 
      this.Define_Pair("DISP"   , 0 , 1);
      this.Define_Pair("FUNLAB" , 0 , 11);  
      this.Define_Pair("GRIDENT", 0 , 10);
      this.Define_Pair("GRIDSEL" , 0, 7 );
      this.Define_Pair("GRIDDISP", 8, 11);
      this.Define_Pair("GRIDLAB" , 0,11);
      this.Define_Pair("PANEL",  0,11);
      this.Define_Pair("PROMPT", 0,11);
      this.Define_Pair("HLPDISP",8,11);
      this.Define_Pair("HLPSEL", 0,7);
      this.Define_Pair("GRIDDISP",8,11);
      this.Define_Pair("OCCUCLEA" ,11, 9);
      this.Define_Pair("OCCUDIRT" ,0 , 9);
      this.Define_Pair("VACACLEA" ,11, 2);
      this.Define_Pair("VACADIRT" ,11, 2);
      this.Define_Pair("OUTOFORD" ,11, 0);
   }

   Define_Pair( Nam,Forground, Background ) {
      var Pr = Object.create(this.Pair);
      Pr.Id  = Nam;
      Pr.Fgc = Forground;
      Pr.Bgc = Background;
      this.ColPair.push(Pr);
   }

   Set_Color( Itm,  Pair ) {
      var Pos = this.Get_Pair(Pair);
      if (Pos > -1) {
         Itm.style.color = this.ColIndv[this.ColPair[Pos].Fgc];
         Itm.style.backgroundColor = this.ColIndv[this.ColPair[Pos].Bgc];
      }   
   }

   Get_Pair( Pr ) {
     var Hit = -1;
     for ( var l=0; l<this.ColPair.length; l++) {
        if (Pr==this.ColPair[l].Id) {
           Hit = l; 
           break;
        }
     }
     return Hit;
   }
   Set_Font( Itm ) {
     var Abc = 5;
   }
}

//--------------------------Stack Class------------------------------------------------  
class Stack {
   Stk = [];
   sp  = -1;
   push(ch) { if ( ! isFull()) this.Stk[++this.sp] = ch; }
   pop()           { if (this.isEmpty()) 
                        return "";  
                     return this.Stk[this.sp--]; }
   isFull()        { return this.sp == this.Stk.length-1; }
   isEmpty()       { return this.sp == -1; }
}
/*------------------------------ Class Report --------------------------------------------
Since array index starts from 0, max index is 0 based. 1 is deducted from 
as and when the command received in the case of layout , group no and variable no.*/

class Report 
  {
   //String 
   FstPagFlg = "N"; LyotSflg="N" ; Pgm=0 ;
   //double 
   Lyax=0; Font_Factor=0.1364;      
   //boolean 
   Eop=false;CallBack = false; PAR = false;Gtot_Pending = false;
           Rotate = true; Terminated = false;
           
   //the print is rotated 90 degree if width is greater than height.
   //to stop this send PAPP command 
  
   //boolean 
   GetName = false; GetPageSetup = false; Frame_Created=false;
   //int 
   Mirror =0;MirWidth=0;
   //int 
   PageNo=0;CurPag=1;PgDiscount=0; PreLyt=-1;
   // Double
   PageWidth = 842; PageHight = 595; PageHead; PageTail;UntCon=1; 
   
   // Page def Variables
   // String
   PageUnit;PageOutp;PageDest;       
   //Vertical line in Layout . Start and end Y Co-Ordinates
   // int
   YLayTop=0; YLayUpe=1; YLayBag=2; YLayBbg=3; YLayBat=4 ;YLayBbt=5; YLayBob=6; YLayBot=7;
   LYCoord = [];
   LayFin = -1 ; Xbeg=-1 ; Xend=-1 ; Ybott=-1;Ytop=-1 ;TopVar=-1;  // Last printed at which area of lsayout
   // BOOLEAN
   LineBreak=false;      
   //int 
   KeyInx=0;MaxLi=45;CurLi=0;LCurLi=0;
   Copies=1;
   
   //Layout related
   GrpVar = {GrpItems: "",GrpValue: "",GrpItype: ""};  // Record   
   GrpGrp = {GrpNpage:false,GrpNpgnm: false,LayGrpVar:[]}; //3 dim     
   LayObj = {LayGroup: ' ',LayGrpHV: ' ',LayWidth: 2.3 , LayHght: 2.3,LayHead: 2.3,
            LayTail: 2.3, LayGrp:[]}; //  2 dim  
   LayArr = []; // 1dim
      
   //Variable definition Variables 
   VarObj = {VarType:"",VarName: "",VarArea: "" , VarARSC: "",VarGorL: "",
             VarWide: 4,VarXaxs: 4,VarYaxs: 4,VarForm: "",VarFons: 3,
             VarFonn: "",VarWght: "" , VarStyl: "",VarUndl:"",VrWpTyp:"",VarTemp:""};   
   VarArr = [];

   // Aggreagate 
   AgrObj = {AgrName:"",AgrType: "",AgrRest: 3, AgrSour: "",AgrForm: "",
             AgrDPos: 4,AgrCond: "",AgrCnt: 4,AgrSum: 4};
   AgrArr = [];
   // Formula
   FormObj = {ForName:"",ForForm: "",ForEqua: "",ForCond: 4};
   FormArr = [];

   PgItmObj = {Dat:"",x:0,y:0,w:0,h:0,Ptr:0,Cnt:0};
   Book    = [];    //  2 Dim Array for storing Page
   LineData= []; // 1 Dim Array for storing original line

   Buttons  = [];
   ButCnt   = 0;
   
   PanelHed = "";
   PanelPtr = "";

   GoBack   = "";
   JumpNo   = "";
   PgFrom   = "";
   PgTo     = "";
   PgMess   = "";

   PrtWin   = "";
//--------------------- Contructor --------------------------
  constructor (xPrg) 
    {
      this.Book = [] ;          
      // An Array is pushed to the book om start of a page
      this.LineData = []; 
      // First header is printed by sensing empty book 
      this.PageNo = 0;
      this.Pgm   = xPrg;
      this.AgrType=[];   
   }
//---------------------------Main Print routine Which analyses the commands --------------------------
  ActPrt(PrtString ) 
   {     
    var PrtStr=PrtString, Str="", RecvdArea = "H",Rtn="E";
//    try {
      while( PrtStr.length > 0 )
        {          
         Str   = PrtStr.substring(0,2);

         if(Str==("PP"))                                             
           {
            this.PageUnit = PrtStr.substring(2,3);
            
             if (this.PageUnit==("C"))
             this.UntCon = 13.2;
            
            else if(this.PageUnit==("P"))
              this.UntCon = 1;
            
            else if(this.PageUnit==("I"))
              this.UntCon = 72;
              
            else if(this.PageUnit==("M"))
              this.UntCon = 28.3464567;
            
            this.PageWidth= this.UntCon*parseInt(PrtStr.substring(3,7))  ;
            this.PageHight= this.UntCon*parseInt(PrtStr.substring(7,11)) ;
            this.PageHead = this.UntCon*parseInt(PrtStr.substring(11,15));
            this.PageTail = this.UntCon*parseInt(PrtStr.substring(15,19));
            this.PageDest = PrtStr.substring(19,20);


            if  ( this.PageHight==0)
                  this.PageHight  = 72*this.UntCon;

            if  ( this.PageTail==0)
                  this.PageHight  = this.UntCon;;


            this.MaxLi = this.PageHight-this.PageTail;

            var len = parseInt(PrtStr.substring(20,22));
            
            if(len == 0)
              this.PageOutp = "";           
            else
              this.PageOutp = PrtStr.substring(22,22+len);
            

            /* ??? if ( PageOutp.length > 0 ) {
               if ( this.PageOutp.substring(0,1)==("@") )
                  this.PageOutp = Utils.Get_Printer(PageOutp);
            }   */                       
            
            PrtStr = PrtStr.substring(22+len,PrtStr.length);

            // the following needs to be ininitialised , in case PP is received again 
           }  // Str = PP

           else if (Str==("PY"))                                             
           {
            var LNo;
            LNo   = parseInt(PrtStr.substring(2,3))-1;

            this.LayArr[LNo] = Object.create(this.LayObj);
            this.LayArr[LNo].LayWidth =this.UntCon*parseInt(PrtStr.substring(3,7));
            this.LayArr[LNo].LayHght  =this.UntCon*parseInt(PrtStr.substring(7,11));
            this.LayArr[LNo].LayHead  =this.UntCon*parseInt(PrtStr.substring(11,15));
            this.LayArr[LNo].LayTail  =this.UntCon*parseInt(PrtStr.substring(15,19));
            this.LayArr[LNo].LayGroup = PrtStr.substring(19,20);
            this.LayArr[LNo].LayGrpHV = PrtStr.substring(20,21);
            PrtStr = PrtStr.substring(21,PrtStr.length);
           } // Str = PY
         else if (Str==("PG"))                                             
           {
            var LNo,GrpCur,VarCur;
            LNo   = parseInt(PrtStr.substring(2,3))-1;
            GrpCur= parseInt(PrtStr.substring(3,4))-1;
            VarCur= parseInt(PrtStr.substring(4,5))-1;

            // start from max index + 1
            for (var k = this.LayArr[LNo].LayGrp.length; k <= GrpCur ; k++) {
               this.LayArr[LNo].LayGrp[k] = Object.create(this.GrpGrp);
               this.LayArr[LNo].LayGrp[k].GrpNpage  = false;
               this.LayArr[LNo].LayGrp[k].GrpNpgnm  = false;
            }    

            // start from max index + 1
            for ( var k = this.LayArr[LNo].LayGrp[GrpCur].LayGrpVar.length; k <= VarCur; k++)
               this.LayArr[LNo].LayGrp[GrpCur].LayGrpVar[k] = Object.create(this.GrpVar);

            this.LayArr[LNo].LayGrp[GrpCur].LayGrpVar[VarCur].GrpItems = PrtStr.substring(5,13); 
            this.LayArr[LNo].LayGrp[GrpCur].LayGrpVar[VarCur].GrpValue = "@!-*&()";
            
            if ( PrtStr.substring(13,14)==("J") || PrtStr.substring(13,14)==("K") ) {             
               this.LayArr[LNo].LayGrp[GrpCur].LayGrpvar[VarCur].Grpitype ="I";
               this.LayArr[LNo].LayGrp[GrpCur].GrpNpage = true;            

               if ( PrtStr.substring(13,14)==("K") )              
                  this.LayArr[LNo].LayGrp[GrpCur].GrpNpgnm = true;               
            }     
             else 
               this.LayArr[LNo].LayGrp[GrpCur].LayGrpVar[VarCur].Grpitype =
                             PrtStr.substring(13,14);
                  
            PrtStr = PrtStr.substring(14,PrtStr.length);
         }  // Str = PG
         else if (Str==("PD"))                                             
           {
            this.VarArr.push(Object.create(this.VarObj));
            var Vptr = this.VarArr.length-1;

            this.VarArr[Vptr].VarType = PrtStr.substring(2,3);
            this.VarArr[Vptr].VarName = PrtStr.substring(3,11);
            this.VarArr[Vptr].VarArea = PrtStr.substring(11,12);
            this.VarArr[Vptr].VarARSC = PrtStr.substring(12,13);

            // as per initial design it was T and there was no provision for more than
            // one group.now group no can be given here. so convert old T into group 1 

            if (!(PrtStr.substring(11,12)=="H" || PrtStr.substring(11,12)=="T")) {
               if (this.VarArr[Vptr].VarARSC=="T" )
                  this.VarArr[Vptr].VarARSC = "1";
               this.VarArr[Vptr].VarArea = 
                          (parseInt(this.VarArr[Vptr].VarArea)-1).toString();

             }
                             
            this.VarArr[Vptr].VarWide =this.UntCon*parseInt(PrtStr.substring(13,17));
            this.VarArr[Vptr].VarXaxs =this.UntCon*parseInt(PrtStr.substring(17,21));

            // Block conversion for Vertical and slaning lines in Layout. It contains 
            // Locaton number
            if (this.VarArr[Vptr].VarARSC==("V") )
               this.VarArr[Vptr].VarYaxs = parseInt(PrtStr.substring(21,25));
            else
               this.VarArr[Vptr].VarYaxs =this.UntCon*parseInt(PrtStr.substring(21,25));

            this.VarArr[Vptr].VarForm = PrtStr.substring(25,26);
            this.VarArr[Vptr].VarFons = parseInt(PrtStr.substring(26,28)); //in java it is mult by 1.2
            this.VarArr[Vptr].VarFonn = PrtStr.substring(28,48);
            this.VarArr[Vptr].VarWght = PrtStr.substring(48,49);
            this.VarArr[Vptr].VarStyl = PrtStr.substring(49,50);
            this.VarArr[Vptr].VarUndl = PrtStr.substring(50,51);
            this.VarArr[Vptr].VarGorL = "L";
            this.VarArr[Vptr].VarTemp = "";

            //VrPrvPr[Vptr] = 0;
            this.VarArr[Vptr].VrWpTyp = "W";

            if (!(this.VarArr[Vptr].VarArea=="H"||this.VarArr[Vptr].VarArea=="T")) 
               {

               var  Lyn = parseInt(this.VarArr[Vptr].VarArea);
               // Max index is 1 less than length;               
               for (var i = 0; i < this.LayArr[Lyn].LayGrp.length; i++)
                 {
                  for(var j =0; j < this.LayArr[Lyn].LayGrp[i].LayGrpVar.length; j++)
                   {
                     if ( this.LayArr[Lyn].LayGrp[i].LayGrpVar[j].GrpItems ==
                                                       this.VarArr[Vptr].VarName)  
                        this.VarArr[Vptr].VarGorL = "G";
                   }            
                }    
            }

            if( this.VarArr[Vptr].VarName==("PAGEPAGE") )
                this.VarArr[Vptr].VrWpTyp = "P";
            
            PrtStr = PrtStr.substring(51,PrtStr.length);
           
           }  // STR = PD
         else if (Str==("PE"))                                             
           { 
            // Equation
            var Tmp = PrtStr.substring(10,11);
            var len = 0;

            if (Tmp==("F")) {            	
               this.FormArr.push(Object.create(this.FormObj));
               var Fptr = this.FormArr.length-1;

               this.FormArr[Fptr].ForName = PrtStr.substring(2,10);
               this.FormArr[Fptr].ForForm = PrtStr.substring(12,24);
               this.FormArr[Fptr].ForCond = parseInt(PrtStr.substring(11,12));

               len = parseInt(PrtStr.substring(24,28))+28;
               this.FormArr[Fptr].ForEqua = this.convertToPostfix(PrtStr.substring(28,len));
               // Type and Reset at are not required in formula 
            } 	
            else if (Tmp==("D")) {
               var Cnd = -1;

               this.AgrArr.push(Object.create(this.AgrObj));
               var Eptr = this.AgrArr.length-1;

               for ( var ii=0; ii<=this.Eptr; ii++) {            	
                   if ( PrtStr.substring(2,10)==(this.AgrArr[ii].AgrName) )
                      Cnd = ii;
               }
               
               if (Cnd > -1) 
                  this.AgrCond[Cnd] = PrtStr.substring(12,24);
               
               len = 32;                 
            }	
            else {
               this.AgrArr.push(Object.create(this.AgrObj));
               var Eptr = this.AgrArr.length;

               this.AgrArr[Eptr].AgrName = PrtStr.substring(2,10);
               this.AgrArr[Eptr].AgrType = Str;
               //Reset Group No
               this.AgrArr[Eptr].AgrRest = parseInt(PrtStr.substring(11,12))-1;
               this.AgrArr[Eptr].AgrForm = PrtStr.substring(12,24);
               this.AgrArr[Eptr].AgrSour = PrtStr.substring(24,32);
               this.AgrArr[Eptr].AgrDPos = Get_VarPos(PrtStr.substring(2,10));
               this.AgrArr[Eptr].AgrCnt  = 0;
               this.AgrArr[Eptr].AgrSum  = 0;
               this.AgrArr[Eptr].AgrCond = "*";
               len = 32;
            }

            Str = "PE";
            PrtStr = PrtStr.substring(len,PrtStr.length);
         } // STR = PE
         else if(Str==("PL"))                                             
           {            
            // line data 
            var val1,chr = "";
	    chr = String.fromCharCode(12);
            var len = PrtStr.indexOf(chr);
            
            if (len < 0)  {
               if ( PrtStr.length == 7 ) {
                   Rtn = "P"+PrtStr.substring(2,7);
                   PrtStr = "";
               	   break;
               }
               len=PrtStr.length;               
            }

            var Data  = PrtStr.substring(3,len);            
            RecvdArea = parseInt(PrtStr.substring(2,3))-1;

            if (this.PreLyt == -1 )
                this.PreLyt  = RecvdArea; 
 
            // if Screen or xls or device , store line data
            if ( this.PageDest==("S")  || ( this.PageDest==("F")  && 
                 this.PageOutp.toLowerCase().indexOf(".xls") > -1 )) 
               this.LineData.push(RecvdArea+Data);
 
//            try   {
                this.Line_Cut_Fields(Data,RecvdArea,this.PreLyt);                  
/*            }
            catch(e)
             {
               alert("LineCut1"+e.message);    
            }  
*/
            this.PreLyt  = RecvdArea; 
            PrtStr = PrtStr.substring(1+len,PrtStr.length);
           }  // STR = PL
         else if(Str==("PO"))                                             
           {
      	    // other data
            var len = parseInt(PrtStr.substring(10,13));

            var Data = PrtStr.substring(13,13+len) ;

            if ( this.PageDest==("S")) 
                 this.LineData.push("O"+ Data);
            this.VarArr[this.Get_VarPos(PrtStr.substring(2,10))].VarTemp= 
                                                        PrtStr.substring(13,len+13);
            PrtStr = PrtStr.substring(13+len,PrtStr.length);
         }
         else if(Str==("PR"))                                             
           {
           	//redefinition
            var SLen=0;
            type = PrtStr.substring(2,3);

            if (type =="T")
              {
               SLen = 19;
              }
             else if (type=="O")
              {
               this.VarArr[this.Get_VarPos(PrtStr.substring(4,12))].VrWpTyp = 
                                PrtStr.substring(3,4);
               SLen=12;
              }
            else if (type == "M") 
              {	
               if (PageDest==("P"))
                  this.Mirror   = parseInt(PrtStr.substring(3,4)) ;
               else
                  this.Mirror   = 0;
                     
               this.MirWidth =this.UntCon * parseInt(PrtStr.substring(4,7)) ;
                
               SLen=7;
              }
            PrtStr = PrtStr.substring(SLen,PrtStr.length);
           }
         //  Commands
         else if (Str=="PA")                                             
           {
            // commands
            var Tflw ="", Ctype ;
            var SLen=1;

            Ctype = PrtStr.substring(2,3);

            if ( Ctype == "E") {       
               Rtn = "E";
               this.Eop = true;

               if ( PrtStr.substring(3,4) == "C" )
                  Rtn = "C";

               break;
            }
            if(Ctype=="C") //No of copies
              {
               this.Copies = parseInt(PrtStr.substring(3,4));
               SLen=4;
             }  
            // this is for printer only . Find some way to store it and send it when print is processed
            else if (Ctype==("D"))//Directly to printer
              {
               Tflw  = PrtStr.substring(3,7);
               SLen=7;
              }	

            else if(Ctype==("L")) //End Of Layout
              {
               RecvdArea  = parseInt(PrtStr.substring(3,4))-1;
               SLen=4;
              
               if ( this.PageDest==("S")) 
                  this.LineData.push(RecvdArea);
               
               if ( this.LayArr[RecvdArea].LayGroup=="F" ) 
               	  this.Form_Process(Tflw,this.PreLyt);
               else 	  
                  this.Layout_and_Tailend (false,true,RecvdArea);
               PreLyt = RecvdArea;
            }  
            else if (Ctype==("N")) //Next Page
                 {
               SLen=3;

               if ( this.PageDest==("S")) 
                    this.LineData.push(" ");

               this.Head_And_Tail("T");
	       this.Head_And_Tail("H");
            }             
            else if (Ctype==("P")) //Printer Dialogue  and stop rotate
              {
               Tflw  = PrtStr.substring(3,4);
               SLen=4;

               if (Tflw==("N"))
                   this.GetName = true;
                   
               if (Tflw==("S"))
                   this.GetPageSetup = true;
                   
               if (Tflw==("P"))
                   this.Rotate = false;                  
            }  

            //End Of Current Report. Initialises page number 
            // if definitions are to be reset. PPC command is sent again
            
            else if (Ctype==("R")) 
              {
               SLen=3;

               this.PAR = true;

               if ( this.LayArr[parseInt(this.PreLyt)].LayGroup==("F") ) 
               	  this.PgDiscount = this.Form_Process (this.PreLyt);
               else 	  
                  this.PgDiscount = this.Layout_and_Tailend (true,true,this.PreLyt);
                  
               
               // no need of initialising any Variable 
               // <FUTURE> check if  MSplitLine is to be set
            }  
            else if (Ctype==("S")) // Skip Line
              {
               SLen  = parseInt(PrtStr.substring(3,7)) ;

               for ( var ii=0; ii  < SLen; ii++) {
      
                  if ( this.PageDest==("S")) 
                       this.LineData.push(PrtStr.substring(3,len));
                  try
                   {
                     Line_Cut_Fields(Data,this.PreLyt,this.PreLyt);                  
                   }
                  catch(e)
                   {
                     alert("LineCut2"+e.message);
                  }
               }  

               SLen=7;
            } 

            PrtStr = PrtStr.substring(SLen,PrtStr.length);
            
           }   // STR = PA        
        } // While

        // ==================T E R M I N A T I O N THROUGH ESCAPE=============
        // if escape is pressed before PAE is received, it will end from here 
        // and not from main evevnt routines
  	// this check is needed , in case the the frame was disposed in key pressed routine
        //     if ( this.Terminated || PageDest==("S") )
        //       Close_Frame();
        //


        if (this.Eop) {
           if ( this.Gtot_Pending )     		
              this.Layout_and_Tailend (true,false,this.PreLyt);
           else if ( this.PageNo == 0 ) {
              this.Head_And_Tail("H");
              this.Head_And_Tail("T");
           }    
           else
              this.Head_And_Tail("T");

           // Every thing is sent to the printer at one shot
           //if (PageDest==("P")) {
           //   RptPrinter Report = new RptPrinter(PageData , VarFonn,  VarWght, VarFons ,  Vartype , VarForm, VarWide  ,this.UntCon , Utils); 
           //   Report.CreatePrint(1,PageNo,PageHight, PageWidth, Rotate , GetName, PageOutp,  Copies );
           //} 
           //else if ( PageDest==("F")) 
           //	   CreateFile(1,PageNo);    	   
           //else

           if  (this.PageDest==("S") && this.FstPagFlg==("N")) 	   
              this.WriteScreen(1);  
            	   
        }    
        // If dest is screen and if the first page is not shown , then show it if page > 1
        else if  (this.PageDest==("S") && this.FstPagFlg==("N") && this.PageNo>0) 
   	             this.WriteScreen(1);
        return Rtn;     	  	  

/*     } //try
     catch (e) 
     {
          alert(Str + " "+"**"+ PrtStr.substring(0,60)+this.Eop);
          this.Terminated  = true;
          return "E";
     }  */  
  }
//  --------------------------------------- call error compiling screen from JItecClt ----------------------------------------
 Call_Error(ErrMss , Ttl , But)
{
   alert(ErrMss + "(" + Ttl + ")");
 } 
//---------------------------------------- Processing one line data -------------------------------
 Line_Cut_Fields(Dat,LineArea,PreLay)
     {
        var Nptr = 0;
        var chr="",DataStr,Wflg= "N";
        var MxCurLi = this.LCurLi , MxFht   = 0 ;

        // Stores the index of the Variable of the Variable array 
        // Using Vptr as pointer , we can get the definition of Variables
        // as well as line data. ( this will be overwritten while 
        // storing the next line data)
        var TempPtr = []; 

	chr = String.fromCharCode(9);
	DataStr = Dat;
	         	    
	/*if   ( MsplitLine > 0 )
        {
          LinNo = LinNo + MsplitLine;;
          MsplitLine = 0 ;
        }*/
        
        // Getting index of the Variable equal to the layout number and order of data got by
        // separating the fields using chr(9)

        var Vptr = this.VarArr.length; 
        for (var Vtr=0; Vtr < Vptr; Vtr++) {
	   if ( this.VarArr[Vtr].VarArea==LineArea && this.VarArr[Vtr].VarARSC=="B" )
            {
              TempPtr.push(Vtr);
              this.VarArr[Vtr].VarTemp = "";

              // Horizontal lines in body are defined in body. 
              // However , since it will not have any correspoding data it will be null. 
              if (!(this.VarArr[Vtr].Vartype=="L")) 
                {
	         Nptr = DataStr.indexOf(chr);
	    
	         if (Nptr <0) {
	            Wflg = "Y";
	            Nptr = DataStr.length;
	         }
	           
	         // Stors The data in Vartemp with index = order number of the Varibale in Var array

                 this.VarArr[Vtr].VarTemp = DataStr.substring(0,Nptr);//
	                 
	         if (Wflg==("Y"))
	            break;
	         else 
                    DataStr =DataStr.substring(Nptr+1,DataStr.length);
              } //else      	            
	   }	   
        }  // for

        if (this.PageNo == 0 )  {
            this.Head_And_Tail("H");
   	    this.LyotSflg = "N";
        }      

        // this is for starting fresh report by restting the printed page while 
        // Pageno is left as it is. If we print the head inside PAR command
        // it will not include new page definition command (PP) which may follow the 
        // par command

        if (this.PAR )  {
           this.PAR    = false;
           this.Head_And_Tail("H");
        }      
 
        // for printing the Layout lower in the case of layout change
        if ( !(PreLay==LineArea)) 
             this.Layout_and_Tailend (false,true,PreLay) ;
      
        if (this.LyotSflg=="N") {
           // Store current layout for future use in "A" commnads without layout
           this.LyotSflg = "Y";
	   this.Layout_UprLwr("U",LineArea); // this was prelay,but it seems to be a misatke. so corrected to LineArea

       	   this.Lyax = this.VarArr[TempPtr[0]].VarYaxs;
           this.LCurLi= this.CurLi;
	 }    	                
         // Check for end of group and act accordingly
	 this.Grp_Crossover_Check(PreLay,TempPtr);

         if ( this.CurLi > this.MaxLi ) {
             this.Head_And_Tail("T");
    	     this.Head_And_Tail("H");
    	     MxCurLi = this.CurLi;
         }
       
        var MltLnHt = 0;

        //Current variable with index copied to Va. Check for errors        
        //  Print Line Data        
        for(var t=0; t < TempPtr.length; t++)
         {                    
          var Va = this.VarArr[TempPtr[t]];
          if (Va.VarGorL==("L"))
            { 
             this.Aggregation(Va.VarName,Va.VarTemp,Va.VarArea);

             if (Va.VarWide!=0)
               {
               	
                // if a Variable of a line are in diff physical lines 
           	   // add splitheight to Curli and make splitheight = 0
               	 
                if ( Va.VarYaxs > this.Lyax )  {
                   this.CurLi = this.LCurLi + ( Va.VarYaxs - this.Lyax+MltLnHt );
                   MltLnHt =0;
                }
                 
                if (this.CurLi > MxCurLi)
                    MxCurLi = this.CurLi; 

                if ( Va.Vartype==("L")) {               	
                   this.StoreLine_To_Page_Array(TempPtr[t]);
                   this.CurLi += Va.VarWide;
                }     
                else {
                   MltLnHt = this.Store_To_Page_Array(this.CurLi,TempPtr[t] , this.LineData.length-1,MltLnHt);

                   if (this.UntCon * this.VarArr[TempPtr[t]].VarFons * this.Font_Factor > MxFht)
                       MxFht = this.UntCon * Va.VarFons * this.Font_Factor;
                }
             }

             this.Gtot_Pending = true;
            } 
            Va.VarTemp = "";
       }
         
       this.LCurLi = MxCurLi +  MxFht + MltLnHt; 
       this.Set_Next_Line_Pos(this.LCurLi );

  }
// ------------------------ Check group cross over from line fields -----------------------------     
    Grp_Crossover_Check(PreLay,TempPtr)
     {
      var Gp=0, k=1,j=1,i=0 , Grp_Hd_Changed=0 ;
                          
      for( j=0; j < this.LayArr[i].length; j++)
         {           
         for(k=0; k < this.LayArr[i].LayGrp[j].length; k++)
           {
           for(var v=0; v < TempPtr.length; v++)
              {
               if (this.LayArr[i].LayGrp[j].LayGrpvar[k].GrpItems==
                        (this.VarArr[TempPtr[v]].VarName) &&
                        this.LayArr[i].LayGrp[j].LayGrpvar[k].Grpitype==("I"))
                 { 
                   if ( !( this.LayArr[i].LayGrp[j].LayGrpvar[k].GrpValue ==
                        this.VarArr[TempPtr[v]].VarTemp))  
                      {                      
                        Grp_Hd_Changed = j;
                        break;
                      }        
               }
                      
           }
           if  ( Grp_Hd_Changed > 0 )  // one Variable of this group is changed, that's enough
               break; 
         }
         if  ( Grp_Hd_Changed > 0 )  // one Variable of this group is changed, that's enough
            break; 
       }   

       // PRINT ALL THE GROUP HEADS FROM THE DETECTED GROUP UPWARDS ( LEVEL DOWNWARDS)

       if (Grp_Hd_Changed > 0 )  {

          PageJmp = true;

          if (this.Gtot_Pending) 
             this.Print_Group_Totals(PreLay,Grp_Hd_Changed);
          else {   
            if (this.PageNo < 2 )
                PageJmp         = false;
          }        	          

          if ( Grp_Hd_Changed == 1) 
             this.Store_Float_VertLine(this.YLayBag);

          Ghyax  = 0,MxFht   = 0;
          var GhCurLi   = 0,GhMxLi=this.CurLi;
                           
          for( j = Grp_Hd_Changed; j < this.LayArr[i].length; j++)  {
              // if the group is to be started in new page go to new page if not started new page in a higher group
             if (this.LayArr[i].LayGrp[j].GrpNpage && PageJmp ) {
                 if (this.LayArr[i].LayGrp[j].GrpNpgnm)
                    this.PgDiscount = Layout_and_Tailend (true,true,PreLay);
                 else
                    this.Head_And_Tail("T");
                
                 PageJmp = false; 
	         this.Head_And_Tail("H");
             } 

             // print group items from  line including non inflencing items and text                                    
             for  (var w=0; w < this.LayArr[i].LayGrp[j].length; w++)
              {
                Gp = Get_VarPos(this.LayArr[i].LayGrp[j].LayGrpvar[w].GrpItems);
         
                //  Store the y axis of first Variable in changed  group of the layout and current prited location plus gap 
                if (  j==Grp_Hd_Changed && w==1 )  {
                	
                    if (this.CurLi > this.MaxLi) {
                       this.Head_And_Tail("T");
    	               this.Head_And_Tail("H");
                    }

                    Ghyax = this.VarArr[Gp].VarYaxs;
                    GhCurLi= this.CurLi ;
                    GhMxLi = GhCurLi;
                 }
                 

                this.CurLi = GhCurLi +  this.VarArr[Gp].VarYaxs - Ghyax;

                if (  this.CurLi > GhMxLi )
                    GhMxLi = this.CurLi; 

                if ( this.VarArr[Gp].Vartype=="L" )
                     this.StoreLine_To_Page_Array(Gp);
                else  {
                   var waste = this.Store_To_Page_Array(this.CurLi,Gp,0,0);
             
                   if (this.UntCon * this.VarArr[Gp].VarFons * this.Font_Factor > MxFht )
                      MxFht =this.UntCon * this.VarArr[Gp].VarFons * this.Font_Factor;
                }

                if (!( Grpitype[i][j][w]=="T"))  
                   this.LayArr[i].LayGrp[j].LayGrpvar[k].GrpValue= 
                         this.VarArr[Gp].VarTemp;
             }
            
        }         
          
        GhMxLi = GhMxLi + MxFht; 
        this.Set_Next_Line_Pos(GhMxLi);
        
        if ( Grp_Hd_Changed == 1) 
           this.Store_Float_VertLine(this.YLayBbg);
     }  
  } 
// ----------------------------------------- Adding Line to Array ------------------------------------
//  Called from 1.LIne , 2.Group head , 3.Group tot , 4.layout , 5.head_tail
    Store_To_Page_Array( Yaxs,Pos,DatCnt,LnHt)
    {
      // Last parameter is used only for call from Line_Cut_Fields
      var Lct=0 , MltLnHt = LnHt ; 
      var Wide = this.VarArr[Pos].VarWide, Fons = this.VarArr[Pos].VarFons,
                 Xaxs = this.VarArr[Pos].VarXaxs;

      var Ywid = this.UntCon*Fons*this.Font_Factor;
      var lf   = String.fromCharCode(10);
      var ei   = String.fromCharCode(8);

      var data="", pdata = this.VarArr[Pos].VarTemp;
      var Formula = false;      
      var TextChk ;   // multline if problem, can be solved by checking actual width
                      // considering font width and cutting into diiferent lines  

      if ( pdata.length == 0 )  
      	   Formula = true; 
         // ???  data = Calc_Formula(Pos);
      else
         data = pdata;     
     
      /*  <IMP> Multline check later
      if ( data.length > 0 ) {
         data = data.replace(ei , lf);

         if (this.VarArr[Pos].Vartype == "T" && !(this.VarArr[Pos].VrWpTyp=="O")) 
           { 
            if ( PageDest==("S")  || PageDest==("P")) {  
               TextChk.setText(data);
               TextChk.setBounds(new Rectangle(Xaxs,Yaxs,Wide,Ywid));
               TextChk.setLineWrap(true);
  
               //  This if is blcoked to check wrap
               // if (!(VrWpTyp[Pos]==("D")||VrWpTyp[Pos]==("L")))

               TextChk.setWrapStyleWord(true);
               Lct = (countLines(TextChk)-1) * Ywid;             
             }
            
             // if line is split in this routine , count of vertical printed lines 
             // is to be adjusted and passed back to line_cutfields 
             if (Lct> MltLnHt )
                MltLnHt = Lct; 
               
             //<FUTURE>   
             Ywid = (int) (Ywid * (Lct+1) *.8);
          
             TextChk.setBounds(new Rectangle(Xaxs,Yaxs,Wide,Ywid));
          }      
      }
      */

      this.Store_page_data(data , Xaxs,Yaxs,Wide,Ywid, Pos, DatCnt );
      
      if ( Formula )
         this.VarArr[Pos].VarTemp = "";
     
      return MltLnHt;

 }
// ----------------------------------------- Adding Line Drawing to page Array ------------------------------------
  StoreLine_To_Page_Array(Pos)
      {
      var XaxS=0, YaxS=0, XaxE=0, YaxE =0;
      var Width ; 

      // All lines from Head or tail and Horizontal from Layout       
      // SO location based translation is not needed 

      Width = this.VarArr[Pos].VarFonn.trim().length;      
      
      if ( Width == 16 && this.VarArr[Pos].VarForm == "V" ) { // Vertical lines of Head and Tail. Location translation not required . 
         //Ending Y(4), Variation_in_Starting Y(4) Variation_in_Ending Y(4),Variation_in X(4)

         Width = this.VarArr[Pos].VarWide;
     	 XaxS  = this.VarArr[Pos].VarXaxs + parseInt( this.VarArr[Pos].VarFonn.substring(12,16)) *this.UntCon;  	  
  	 XaxE  = XaxS;

         YaxS = this.VarArr[Pos].VarYaxs + parseInt( this.VarArr[Pos].VarFonn.substring(4,8)) *this.UntCon;
         YaxE = parseInt( this.VarArr[Pos].VarFonn.substring(0,4)) *this.UntCon +
                     parseInt( this.VarArr[Pos].VarFonn.substring(8,12)) *this.UntCon; 
      }                        	
      else if (Width == 16 && this.VarArr[Pos].VarForm == "H" )  {     // Horizontal.  Location translation not required
         //Horizontal -  Ending X(4), Variation_in Y(4),  Variation_in_Starting X(4),Variation_in_Ending  X(4)

         Width = this.VarArr[Pos].VarWide;
     	 XaxS  = this.VarArr[Pos].VarXaxs+ parseInt( this.VarArr[Pos].VarFonn.substring(8,12)) *this.UntCon;  	  
  	 XaxE  = parseInt( this.VarArr[Pos].VarFonn.substring(0,4)) *this.UntCon +
                      parseInt( this.VarArr[Pos].VarFonn.substring(12,16)) *this.UntCon;

         if ( "HT".indexOf(this.VarArr[Pos].VarArea) > -1 )
            YaxS = this.VarArr[Pos].VarYaxs + parseInt( this.VarArr[Pos].VarFonn.substring(4,8)) *this.UntCon;
         else
            YaxS = this.CurLi + parseInt(this.VarArr[Pos].VarFonn.substring(4,8)) *this.UntCon;
            
         YaxE = YaxS; 
      }
      else if (Width == 20 && VarForm[Pos]==("S"))   {    // Slanting     
         //Ending X(4), Ending Y(4),Variation_in_Starting Y(3) Variation_in_Ending Y(3),
         //           Variation_in_Starting X(3) Variation_in_Ending X(3);
                    
         Width = this.VarArr[Pos].VarWide;
     	 XaxS  = this.VarArr[Pos].VarXaxs+ parseInt(this.VarArr[Pos].VarFonn.substring(14,17)) *this.UntCon;  	  
  	 XaxE  = parseInt( this.VarArr[Pos].VarFonn.substring(0,4)) *this.UntCon +
                   parseInt( this.VarArr[Pos].VarFonn.substring(17,20)) *this.UntCon;

         YaxS = this.VarArr[Pos].VarYaxs + parseInt( this.VarArr[Pos].VarFonn.substring(8,11)) *this.UntCon;
         YaxE = parseInt( this.VarArr[Pos].VarFonn.substring(4,8)) *this.UntCon +
                parseInt( this.VarArr[Pos].VarFonn.substring(11,14)) *this.UntCon;
      }
      else
         Width = 0; 

      if ( Width > 0 )
         this.Store_page_data( this.VarArr[Pos].VarWide.toString(), XaxS,YaxS,XaxE,YaxE, Pos, 0 );
 }       
// ----------------------------------------- Adding Floating Vertcal Lines of LayOut------------------------
 Store_Float_VertLine(CurLay,PreLay)
   {
      var XaxS=0 , YaxS=0 , XaxE=0 , YaxE =0 , BottVar=-1 ;
      var Width;
      
      //  to block printing same thing again while calling from Tail of page
      if ( CurLay > this.LayFin )  {           
         if ( CurLay < 100 )
            this.LYCoord[CurLay] = this.CurLi;
         else {
            this.Xbeg=2000;
            this.Xend=-1;
            this.Ytop=1000;
            this.Ybott=-1;
         }           

         if (  this.LineBreak && this.TopVar > -1)
            this.Store_page_data( parseInt(this.VarArr[this.TopVar].VarWide), this.Xbeg,this.Ytop,Xend,this.Ytop, this.TopVar, 0 );

         var Vptr = this.VarArr.length;

         for (var h=0;h<Vptr;h++) {	
            Width = this.VarArr[h].VarFonn.trim().length;

            if ( CurLay == 100 && this.VarArr[h].Vartype=="L" &&  !this.VarArr[h].VarARSC=="B"
                            && this.VarArr[h].VarForm=="H" && this.VarArr[h].VarArea==(PreLay))  {
               if (  this.VarArr[h].VarARSC=="U" )
                  this.TopVar = h;
                                     
               if (  this.VarArr[h].VarARSC=="L" )
                  BottVar = h;
            
          }
            
          if (this.VarArr[h].Vartype=="L" &&  this.VarArr[h].VarARSC=="V" && 
                     Width > 15 && this.VarArr[h].VarArea==PreLay)  { 
             if ( CurLay == 100 )  {
                if (this.VarArr[h].VarForm=="V"  &&  parseInt( this.VarArr[h].VarFonn.substring(0,4)) > this.LayFin ) {
                   Width = this.VarArr[h].VarWide;
                   XaxS  = this.VarArr[h].VarXaxs + parseInt(this.VarArr[h].VarFonn.substring(12,16)) *this.UntCon;  	  
                   XaxE  = XaxS;

                   YaxS = this.VarArr[h].VarYaxs;
                   YaxS = LYCoord[YaxS] + parseInt(this.VarArr[h].VarFonn.substring(4,8)) *this.UntCon;                  
                   YaxE = this.CurLi + parseInt(this.VarArr[h].VarFonn.substring(8,12)) *this.UntCon;

                   if ( XaxE > Xend )
                      Xend = XaxE;                          
                          
                   if ( XaxS < Xbeg )
                      Xbeg = XaxS;

                   if ( Ybott < YaxE )
                      Ybott = YaxE;    

                   if ( Ytop > YaxS )
                      Ytop = YaxS;    
                         
                }	 
                else
                   Width = 0;
             }
             else if ( this.VarArr[h].VarForm=="V"  && CurLay == parseInt( this.VarArr[h].VarFonn.substring(0,4)) )  {  	            	           
                //Ending Y(4), Variation_in_Starting Y(4) Variation_in_Ending Y(4),Variation_in X(4)

                Width = this.VarArr[h].VarWide;
                XaxS  = this.VarArr[h].VarXaxs + parseInt(this.VarArr[h].VarFonn.substring(12,16)) *this.UntCon;  	  
                XaxE  = XaxS;

                YaxS = this.VarArr[h].VarYaxs;
                YaxS = LYCoord[YaxS] + parseInt(this.VarArr[h].VarFonn.substring(4,8)) *this.UntCon;
                  
                YaxE = parseInt( this.VarArr[h].VarFonn.substring(0,4) );                  
                YaxE = LYCoord[YaxE] + parseInt(this.VarArr[h].VarFonn.substring(8,12)) *this.UntCon;
             }
             else if ( this.VarArr[h].VarForm=="S"  &&  this.LayFin == parseInt( this.VarArr[h].VarFonn.substring(4,8)) 
                      && Width > 19)  {
                  //Ending X(4), Ending Y(4),Variation_in_Starting Y(3) Variation_in_Ending Y(3),
                  //Variation_in_Starting X(3) Variation_in_Ending X(3);
         
                Width = this.VarArr[h].VarWide;      
       	        XaxS  = this.VarArr[h].VarXaxs + parseInt(this.VarArr[h].VarFonn.substring(14,17)) *this.UntCon;  	  
  	        XaxE  = parseInt(this.VarArr[h].VarFonn.substring(0,4)) *this.UntCon +
                        parseInt(this.VarArr[h].VarFonn.substring(17,20)) *this.UntCon;

                YaxS = this.VarArr[h].VarYaxs;
                YaxE = parseInt( this.VarArr[h].VarFonn.substring(4,8)) ;
  	                                       
                YaxS = LYCoord[YaxS] + parseInt(this.VarArr[h].VarFonn.substring( 8,11)) *this.UntCon;
                YaxE = LYCoord[YaxE] + parseInt(this.VarArr[h].VarFonn.substring(11,14)) *this.UntCon; 
             }
             else 
                  Width = 0;
           }
           else
               Width = 0;

            if ( Width > 0 )  
               this.Store_page_data( Width.toString(), XaxS,YaxS,XaxE,YaxE, h, 0 );
         }         
         
         if ( CurLay == 100 )
            this.LineBreak = true;
         else
            this.LineBreak = false;

         if (this.LineBreak && BottVar > -1)
            this.Store_page_data( this.VarArr[BottVar].VarWide.toString, Xbeg,Ybott,Xend,Ybott, BottVar, 0 );                       
         
         this.LayFin  = CurLay;  
      }
  }         
// --------------------------------------- Store page data ------------------------------------     
  Store_page_data(Dt,XaxS,YaxS,Wid,Hei,h,Cn)
  {
      var Mrwd=0 , Repeat=this.Mirror+1 , WidInc=Wid;
      var Bind = this.Book.length-1;

      while ( Repeat > 0) {
         this.Book[Bind].push(Object.create(this.PgItmObj));
         var Sub = this.Book[Bind].length-1;

         this.Book[Bind][Sub].Dat = Dt;
         this.Book[Bind][Sub].x   = XaxS;
         this.Book[Bind][Sub].y   = YaxS;
         this.Book[Bind][Sub].w   = Wid;
         this.Book[Bind][Sub].h   = Hei;
         this.Book[Bind][Sub].Ptr = h;
         this.Book[Bind][Sub].Cnt = Cn;

         Mrwd     = Mrwd+this.MirWidth;
         XaxS     = XaxS + Mrwd;
         WidInc   = WidInc + Mrwd;
         Repeat--;
     }     
 }
// --------------------------------------- Write Upper And Lower Layout ------------------------------------     
   Layout_UprLwr(UprLwr,Ly)
     {
      var Layout_Printed = "N";
      var Ulyax = 0;
      var UlCurLi= 0,UlMxLi=0 , TopLines = this.LayArr[Ly].LayHead;  
      
      var MxFht = 0;
      UlMxLi = this.CurLi;   

      if (UprLwr==("U"))                 
         this.LayFin = -1;
            
      try 
      {      	
         var Vptr = this.VarArr.length;

         for (var h=0;h<Vptr;h++) 
         {	
  	    if (this.VarArr[h].VarWide > 0 && this.VarArr[h].VarArea==Ly &&
  	                this.VarArr[h].VarARSC==UprLwr && (!UprLwr=="L"||this.LyotSflg=="Y"))
            { 
              if (this.Layout_Printed==("N")) {
                 if (this.CurLi > this.MaxLi) {	                              
                    this.Head_And_Tail("T");
	            this.Head_And_Tail("H");
                 }

                 if (UprLwr==("L"))               
                    this.Store_Float_VertLine(this.YLayBob);                           
                 else if (UprLwr==("U")) 
                    this.Store_Float_VertLine(this.YLayTop);
 

                 UlCurLi = this.CurLi ;
         	 UlMxLi = UlCurLi;   
                 Ulyax   = VarYaxs[h];
                        
                 if (UprLwr==("U") )
                    this.TopLines = this.TopLines + UlCurLi; 

                 this.LyotSflg = "Y";
            }

            this.Layout_Printed = "Y";
            this.CurLi = UlCurLi +  this.VarArr[h].VarYaxs - Ulyax;
                  
            if (this.CurLi > UlMxLi)
               UlMxLi = this.CurLi; 

            if ( Vartype[h]==("L") )
               this.StoreLine_To_Page_Array(h);
            else
            {   
               var waste = this.Store_To_Page_Array(this.CurLi,h,0,0);            
               if (this.UntCon * this.VarArr[h].VarFons * this.Font_Factor > MxFht )
                  MxFht =this.UntCon * this.VarArr[h].VarFons * this.Font_Factor;
            }       
   
            this.FvalClr(this.VarArr[h].VarName);
         }  // if   	      
       }   // for
     }    // try
     catch( e)
       {
           alert ( "Error in Layout_UprLwr"+e.message);
     }                       	        
     UlMxLi = UlMxLi + MxFht; 
   	 
     // Top line is used to set the current line to it , if no item is found in the layout upper
     if (UprLwr==("U")  &&  UlMxLi < this.TopLines)
        UlMxLi  = this.TopLines ; 
                 
     this.Set_Next_Line_Pos(UlMxLi);   
   	 
     // Save body beginning Y coord for verical line, if it is upper 
     // Process Vertical line, if it is lower.

     if (UprLwr==("U"))                 
        this.Store_Float_VertLine(this.YLayUpe);
     else {  
        this.Store_Float_VertLine(this.YLayBot);
     	this.LyotSflg = "N"; 
     }

     if (UprLwr==("L")) {  
        for ( var ii=0 ; ii<8 ; ii++)
           this.LYCoord[ii] = 0;
     }      
  }   

// -------  Printing group totals , layout lower and optionally resets page and totals--------------------
   Layout_and_Tailend (TeAlso,Addpage,Ly)
   {     
     var PgDis = 0;
          
     if ( this.Gtot_Pending )     		
        this.Print_Group_Totals(Ly,1);

     this.Layout_UprLwr("L",Ly); 
 
     if ( TeAlso )  {
     	// Total number of pages of Curr print
        PgDis = this.PageNo;
        // Needed for resetting the page printed 
        //Stop priinting tail after it 
        if ( this.CurLi > 0 )
           this.Head_And_Tail("T");

        this.Page_of_page( this.PgDiscount+1 , PgDis,  this.PgDiscount);
     }     
 }        
// ---------------------------------------------- Print head and Tail -----------------------------     
  Form_Process(Ly,PreLay)
   {
     //if any previous layout is pending print it
     if ( LyotSflg==("N")) 
          Layout_and_Tailend (true,false,PreLay) ; 

     if ( this.CurLi == 0 || this.PageNo == 0 || PAR )   {  
          Head_And_Tail("H");
  
          if (PAR)
             PAR = false;
     }      


     Layout_UprLwr("U",Ly);
     LyotSflg = "Y";

     this.Store_Float_VertLine(this.YLayUpe);


     Layout_UprLwr("B",Ly);

     this.Store_Float_VertLine(this.YLayBob);


     Layout_UprLwr("L",Ly);
     
     this.Store_Float_VertLine(this.YLayBot);
     
     this.LayFin = -1;
 }  
// ---------------------------------------------- Print head and Tail -----------------------------     
   Head_And_Tail(HT)
     {
      var  MxFht   = 0 , Go=false;
      // it should print vertical lines from where Head_and_tail is called. 
      // It should again print same thing in Next page 

      if (HT==("T")) {
      	  var PreFin = this.LayFin;
          this.Store_Float_VertLine(100);        
          this.LayFin = PreFin;
      }    
      
      if (  HT==("H") ) { 
            var Items = [];
            this.Book.push(Items);
            this.PageNo = this.PageNo+1;            
      }      	     
//      try {         
          var Vptr = this.VarArr.length;

          for (var h=0;h<Vptr;h++)
   	    {   
              var Nm = this.VarArr[h].VarName;
              
   	      if (this.VarArr[h].VarWide!=0 && this.VarArr[h].VarArea==(HT))
   	        { 
   	         if (Nm==("PAGEONLY"))
	            this.VarArr[h].VarTemp = "Page     : "+ (this.PageNo-this.PgDiscount).toString();
	         else if (Nm==("PAGEPAGE"))
	            this.VarArr[h].VarTemp = "Page     : "+(this.PageNo-this.PgDiscount).toString();
	         else if (Nm==("CONTINUD"))
	            this.VarArr[h].VarTemp = "Continued ..."+(this.PageNo-this.PgDiscount+1).toString();
	         else if (Nm==("DATECURR"))
	            this.VarArr[h].VarTemp = "Date : "+ this.CurrDateTime("D");
	         else if (Nm==("TIMECURR"))
	            this.VarArr[h].VarTemp = "Time : "+ this.CurrDateTime("T");

                 Go = false;
                   
                 // only first page 
                 if (this.VarArr[h].VarARSC.endsWith("F")   && this.PageNo-this.PgDiscount == 1)
                    Go = true;

                 // Except Last page 
                 if (this.VarArr[h].VarARSC.endsWith("a")  && !(this.Eop || PAR  ))
                     Go = true;


                 // only middle pages 
                 if (this.VarArr[h].VarARSC.endsWith("M") && this.PageNo-this.PgDiscount > 1 && 
                     !(this.VarArr[h].VarARSC.endsWith("M") && ( this.Eop || PAR) ))
                    Go = true;

                 // only last page 
	         if ( this.VarArr[h].VarARSC.endsWith("E") &&  (this.Eop || PAR  ))  
	             Go = true;
	         
	         // All apges
	         if ( this.VarArr[h].VarARSC.endsWith("A"))
	             Go = true;
	         
                 if ( Go )   {
                    //vertical line
                    if (this.VarArr[h].Vartype==("L")) 
                       this.StoreLine_To_Page_Array(h);
                    else {
     	               var waste = this.Store_To_Page_Array(this.VarArr[h].VarYaxs,h,0,0);   	            
                       // FUTURE mAKE IT LAST LINE
                       //if (this.UntCon * this.VarArr[h].VarFons * this.Font_Factor > MxFht )
                       MxFht =this.UntCon * this.VarArr[h].VarFons * this.Font_Factor;
 	               this.FvalClr(this.VarArr[h].VarName);
    	            }
    	       
                    this.CurLi = this.VarArr[h].VarYaxs;
                 } // if   	         
   	      }  // upper if
   	 }  // while
   	        	     
/*       }
       catch( e) 
       {
         alert("head and tail"+e.message);
       }*/
         
       // in the case of an error in try , balance should be printed from next page after tail. SO IT IS BROUGHT DOWN
       // Prev tail check
         if (  HT==("T"))   	     
               this.CurLi = 0;  	
   	        
         this.CurLi = this.CurLi  + MxFht;
          
         if ( this.PageHead > this.CurLi)
            this.CurLi = this.PageHead;

         this.Set_Next_Line_Pos(this.CurLi);    

         for ( var ii=0; ii<8 ;ii++)
             this.LYCoord[ii] = this.CurLi;

 }
// ---------------------------------------   ------------------------------------     
   Print_Group_Totals(Vly, gp) 
     {
      var Yx=0 ,YxPlus=0, Lay =  parseInt(Vly);  
      var GrVarPrinted = "N",GrvMoreThanOne = "N";
      
      this.Store_Float_VertLine(this.YLayBat);

      if (this.AgrType[0]==("X") )
         return;
            
      try {
        //  Store the y axis of first Variable in inner most  group of the 
        //    layout and current printed location plus gap 
        var Gtyax = 0,MxFht   = 0;
        var GtCurLi= 0,GtMxLi=0;  
        
        GtMxLi  = this.CurLi ;
                   
        for(var g=this.LayArr[Lay].LayGrp.length-1; g >= gp; g--)
            {
             var Vptr = this.VarArr.length;
             for (var h=0;h<Vptr;h++)
   	        {
   	         if ( this.VarArr[h].VarArea==Vly  && this.VarArr[h].VarARSC==g.toString)                
                   {
                     if ( this.VarArr[h].VarWide!=0 )   { 
                        if (GrVarPrinted.endsWith("N")) {
                           if ((this.CurLi> this.MaxLi)) {
                              this.Head_And_Tail("T");
	                      this.Head_And_Tail("H");
                           }

                          GtCurLi = this.CurLi;
                          Gtyax   = VarYaxs[h];
                          GtMxLi  = GtCurLi ;
                        }
                       
                        this.CurLi = GtCurLi + this.VarArr[h].VarYaxs - Gtyax ;
                    
                        if (  this.CurLi > GtMxLi )
                           GtMxLi = this.CurLi; 

                        if ( Vartype[h]==("L") )
                           this.StoreLine_To_Page_Array(h);
                        else  {
                           var waste = this.Store_To_Page_Array(this.CurLi,h,0,0);

                        if (this.UntCon * this.VarArr[h].VarFons * this.Font_Factor > MxFht )
                             MxFht =this.UntCon * this.VarArr[h].VarFons * this.Font_Factor;                       
                       }	                     
                       GrVarPrinted = "Y";                       
                     }
                     this.FvalClr(this.VarArr[h].VarName);    
                   }
                }               
            }
            
       	    GrVarPrinted = "N";
            GtMxLi = GtMxLi + MxFht; 
            this.Set_Next_Line_Pos(GtMxLi);
               
       }
       catch( e)
         { 
           alert("group total"+e.message);
         }                       	      
        
      this.Gtot_Pending = false;

      if ( gp==this.LayArr[Lay].LayGrp.length-1)
         this.LayFin = this.YLayBbt; 
 }
// ---------------------------------------------- Calculation of Aggregates-----------------------------     
   Aggregation(ItmNam,ItmVal,Area)
     {     	
      var Ly = 0;   	    
      var Sum, val= 0 , TempVal=0;
    
      if ( ! ( Area==("H") || Area==("T") ))
         Ly = parseInt(Area);
      
      try {
         if (ItmVal==("")) 
            Sum = 0;
         else
            Sum = parseInt(ItmVal.trim().replace(",",""));
      }
      catch(e)  { 
            Sum = 0;
      }                       	      
      
      var Eptr = this.AgrArr.length-1;
      for (var j = 0 ; j <= Eptr; j++)   {      
          if (this.AgrSour[j]==(ItmNam))   {
          	 val = Sum;
          	 
             if ( ! this.AgrCond[j]==("*") ) {
          	    sign = this.AgrCond[j].substring(0,1);
          	    Cnd  = parseInt(this.AgrCond[j].substring(1,this.AgrCond[j].length).trim().replace(",","")); 
          	    
                if ( (sign==("<") && val >= Cnd ) || (sign==(">") && val <= Cnd )
                        ||  (sign==("=") && val != Cnd ))
                     val = 0;   
             }
          	 
             if ( ( this.AgrSum[j] > val && this.AgrType[j]==("N")) ||
                (  this.AgrSum[j] < val && this.AgrType[j]==("X")))
                TempVal = val;
             else
                TempVal = this.AgrSum[j];

             if ( ! ( this.AgrType[j]==("N") || this.AgrType[j]==("X"))) {
   	            this.AgrSum[j] = this.AgrSum[j]+val;
   	            this.AgrCnt[j] = this.AgrCnt[j]+1;
   	              
   	            if(this.AgrType[j]==("C"))
                   TempVal=this.AgrCnt[j];
                else if(this.AgrType[j]==("S"))
                   TempVal=this.AgrSum[j];

                else if ( this.AgrType[j]==("A"))
                   TempVal=this.AgrSum[j]/this.AgrCnt[j];
             } 
                                 
             //DecimalFormat decimalFormat   = new DecimalFormat("###,###,###.00");
             this.VarArr[(this.AgrDPos[j])].VarTemp = TempVal.toString;  
          }                                                 	            
      } 	    
  }
//----------------------------------- Changing page to page of page----------------------------
   Set_Next_Line_Pos(LatestPos)
  {   
    this.LCurLi= LatestPos ;
    this.CurLi = LatestPos ;
}
// ----------------------------- Clear Group Sum Values------------------------     
   FvalClr(ItmNam)
     {
        var Eptr = this.AgrArr.length-1;
        for (var j = 0; j <= Eptr; j++) {
           if (this.AgrName[j]==ItmNam) {
              this.AgrSum[j] = 0;
   	      this.AgrCnt[j] = 0;
           }  
        }
            
     }
 // ----------------------------------------------    -----------------------------
     Get_VarPos(ItmNam)
     {
   	var ParPos =0,Vptr = this.VarArr.length;
        for(var j = 0; j < Vptr; j++) 
   	{
          if (this.VarArr[j].VarName==ItmNam) 
            {
             ParPos = j;
             break;
            }
   	}
   	return(ParPos);  
     }
//---------------------------------------- Count Lines -----------------------------------
  countLines(textArea) 
     {
      var noLines = 0;
/*      asd = textArea.getText();
      
      if(asd==("")||asd==null)
        asd = " ";
      
      AttributedString text = new AttributedString(asd);
      FontRenderContext frc = textArea.getFontMetrics(textArea.getFont())
                              .getFontRenderContext();
      AttributedCharacterIterator charIt = text.getIterator();
      LineBreakMeasurer lineMeasurer = new LineBreakMeasurer(charIt, frc);
      float formatWidth = (float) textArea.getSize().width;
      lineMeasurer.setPosition(charIt.getBeginIndex());
      
      while (lineMeasurer.getPosition() < charIt.getEndIndex()) 
        {
         lineMeasurer.nextLayout(formatWidth);
         noLines++;
        }  */
      return noLines;
     }
// ------------------------------CurrDateTime --------------------------------------
 CurrDateTime ( What )  
  {
   var date = new Date();
   var cdate = date.toString();

   if ( What=="D") 
      return  cdate.substring(8,10) + "/" + cdate.substring(4,7)+ "/" +
                   cdate.substring(11,15);
   else
      return  cdate.substring(16,24);

   //Wed Mar 25 2015 05:30:00 GMT+0530 (India Standard Time)
 }
// ---------------------------------------------- Add Button -----------------------------   
  Show_Button( Data,x,y,w,h,Pos,Lino)
   {
     var FdSiz  = this.VarArr[Pos].VarFons*1.5/1.2;
     var Dh;
     var Lbl = Data;

     Dh = document.createElement("button");    
     Dh.style.position = "absolute";
     Dh.type="button";

     Dh.name=this.Pgm.toString().padStart(3,"0")+this.VarArr[Pos].VarName.padEnd(8, " ")+
             Lino.toString();

     Dh.style.left   = x.toString() + "px";
     Dh.style.top    = y.toString() + "px";
     Dh.style.width  = w.toString() + "px";
     Dh.style.height = h.toString() + "px";

     if ( this.VarArr[Pos].VarWght=="B" || this.VarArr[Pos].VarWght=="S")
         Lbl = Lbl.bold();

     Dh.style.fontSize =  "9pt";     
     Dh.style.fontFamily = "arial";
     //Dh.style.fontFamily = Font(this.VarArr[Pos].VarFons.trim());
     //Lbl = Lbl.fontsize(FdSiz);

     Dh.innerHTML= Lbl;
     Dh.style.background = "Blue";
     Dh.style.color = "White";
     Dh.style.visibility = "visible"
     Dh.onclick = DrillDown;
     this.PanelPtr.appendChild(Dh);
   }
// -------------------------------------------- Add Text -----------------------------
  Show_Text(Data,x,y,w,h,Pos)
   {
      var Ptr   = "";
      var FdSiz  = this.VarArr[Pos].VarFons;
      var newText = Data.trim();
     
      //TextPtr.setLineWrap(true);
      Ptr = document.createElement("INPUT");    
      Ptr.style.position = "absolute";
      Ptr.setAttribute("type", "text");
      Ptr.disabled = true;
      Ptr.style.borderStyle = "none"; 
      Ptr.style.backgroundColor =  "white" ;
      Ptr.style.left = x.toString() + "px";
      Ptr.style.top  = y.toString() + "px";
      Ptr.style.width = w.toString() + "px";
      Ptr.style.height = h.toString() + "px";
      Ptr.style.wordWrap = "break-word";
      Ptr.style.fontSize = FdSiz.toString() + "pt";

      Ptr.value = newText;

      if ( this.VarArr[Pos].VarWght=="B" || this.VarArr[Pos].VarWght=="S")
         Ptr.style.fontWeight = "bold";
   
      if ( this.VarArr[Pos].VarFonn.length > 2)
         Ptr.style.fontFamily = this.VarArr[Pos].VarFonn.trim();
   
      if (this.VarArr[Pos].VarForm==("R"))  
         Ptr.style.textAlign = "right";
      else if (this.VarArr[Pos].VarForm==("C"))
         Ptr.style.textAlign = "center";
      else if (this.VarArr[Pos].VarForm==("L"))
         Ptr.style.textAlign = "left";

      this.PanelPtr.appendChild(Ptr); 

      /*
         .style.fontStyle = "normal|italic|oblique|initial|inherit"
         .style.fontWeight = "normal|lighter|bold|bolder|value|initial|inherit"
        .style.fontSize = "xx-small,x-small,small,medium,large,x-large,xx-large

        family-name - The name of a font-family, like "times", "courier", "arial", etc.
        generic-family - The name of a generic-family, like "serif", "sans-serif", "cursive",
        "fantasy", "monospace".
        style.fontFamily = "verdana,sans-serif";
      */
  }
// ---------------------------------------------- Add Line  -----------------------------
   Show_Line(Data,x,y,w,h,Pos)
     {       
/*      try
        {
          PanelPtr.SetPainter( x,y,w,h,parseInt(Data));
        }
      catch ( e) 
        {
        } */
  }
// ---------------------------------------------- Add Image -----------------------------
 Show_Images(Data,x,y,w,h,Pos)
     {
       
      try
        {
/*         BufferedImage off_Image= null; 
         
         try {
           FindImage Img = new FindImage(Utils);
           off_Image = Img.Read_Image(this.VarArr[Pos].VarTemp);
          }
         catch (e) {} 

         if ( off_Image == null ) 
              System.out.println( " File missing -> " + this.VarArr[Pos].VarTemp ); 
         else {         
            BufferedImage bi = new BufferedImage(w,h/2.4*UntCon, BufferedImage.TRANSLUCENT);
            Graphics2D g2d = (Graphics2D) bi.createGraphics();
            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
            g2d.drawImage(off_Image,0,0,w,h/2.4*UntCon), null);
            g2d.dispose();        
            JLabel picture = new JLabel("images Area") ;
            picture.setBounds(x,y,w,h/2.4*UntCon);
            picture.setIcon(new ImageIcon(bi));
          } */
        }
      catch (e) 
        {
            }
  }
// --------------------------------------- Write a screen Page ----------------------------------------
  WriteScreen(Pag_Base1)
   {
      // Page number is based on 1. This has to be converted here to base 0
      var PgVPtr,PgLiNo,Pgx,Pgy,Pgw,Pgh, PgNo= Pag_Base1 -1;
      var PgData;

      this.CurPag = Pag_Base1;
      	
      if ( !this.Frame_Created  ) {
   	 this.CreateView();
         this.Frame_Created = true;
      }    
      
      var PgLn = this.Book[PgNo].length

      this.CleanPage();
      this.PanelPtr.style.visibility = "hidden";

      for(var i =0; i < PgLn; i=i+1)
         {
           PgData = this.Book[PgNo][i].Dat;
           Pgx    = this.Book[PgNo][i].x;
           Pgy    = this.Book[PgNo][i].y;
           Pgw    = this.Book[PgNo][i].w;
           Pgh    = this.Book[PgNo][i].h;
           PgVPtr = this.Book[PgNo][i].Ptr;
           PgLiNo = this.Book[PgNo][i].Cnt;
           if (this.VarArr[PgVPtr].VarType == "T")
              this.Show_Text(PgData,Pgx,Pgy,Pgw,Pgh,PgVPtr);
           else if (this.VarArr[PgVPtr].VarType == "B")
              this.Show_Button(PgData,Pgx,Pgy,Pgw,Pgh,PgVPtr,PgLiNo);
           else if (this.VarArr[PgVPtr].VarType == "I")
              this.Show_Images(PgData,Pgx,Pgy,Pgw,Pgh,PgVPtr);
           else if (this.VarArr[PgVPtr].VarType == "L")
              this.Show_Line(PgData,Pgx,Pgy,Pgw,Pgh,PgVPtr);
       }      

      this.PanelPtr.style.visibility = "visible";
      this.JumpNo.value = Pag_Base1;
      this.JumpNo.focus();

      this.FstPagFlg = "Y";
      this.PgTo.value = this.PageNo.toString();
   }
// -------------------------------------------- Screen Show ----------------------------   
  CreateView()
  {
    var x=130, y=65, SPhit=this.PageHight,SPwid=this.PageWidth;
 
    Programs[this.Pgm].Hide();

    this.PanelHed = this.Create_Hed_fields (document.body,"form",x,y,SPwid,25,"*",false);  
    this.PanelPtr = this.Create_Hed_fields (document.body,"form",x,y+25,SPwid,SPhit-25,"*",false);  
    this.JumpNo   = this.Create_Hed_fields (this.PanelHed,"input",90 ,3,40,20,"Jump To",true);     
    this.PgFrom   = this.Create_Hed_fields (this.PanelHed,"input",190,3,40,20,"Begin",false); 
    this.PgTo     = this.Create_Hed_fields (this.PanelHed,"input",290,3,40,20,"End",false) ;
    this.PgMess   = this.Create_Hed_fields (this.PanelHed,"input",420,3,SPwid-300,20,null,false);
    this.PgMess.innerHTML="F9:Print, PageDown:Next Page, PageUp:Previous Page, END:Last Page, HOME:First Page, Esc:Close ";

    this.PgFrom.value = "1";
  }  
//---------------------------Normall label for all items-------------------------------
  Create_Hed_fields (Hd,Typ,X,Y,W,H,Lbl,Allw) 
  {
     var Dh,Dl ;
     Dh = document.createElement(Typ);    
     Dh.style.position = "absolute";

     if ( Typ == "input")
        Dh.setAttribute("type", "text");

     Dh.style.left = X.toString() + "px";
     Dh.style.top  = Y.toString() + "px";
     Dh.style.width = W.toString() + "px";
     Dh.style.height = H.toString() + "px";
     Dh.style.visibility = "visible";
     Hd.appendChild(Dh);
     
     if (Lbl > "*" && Typ == "input") {
        var x = X;  
        x = x-Lbl.length*8 ;

        Dl = document.createElement("LABEL");  
        Dl.style.left = x.toString() + "px";
        Dl.style.top = Y.toString() + "px";
        Dl.style.width = (Lbl.length*10).toString() + "px";
        Dl.style.height = H.toString() + "px";
        Dl.style.visibility = "visible";
        Dl.style.position = "absolute";
        Hd.appendChild(Dl);
        Dl.innerHTML=Lbl;     
     }
     else if ( Typ == "button")
        Dh.innerHTML = Lbl;
 
     if ( Allw) {
        Dh.disabled = false;
        //Dh.addEventListener("change", PageSelect); 
        Dh.addEventListener("keydown",PageSelect);
      }
     else
        Dh.disabled = true;

     return Dh;
 }
 // -------------------- Remove All---------------------------------------
 CleanAll()
 {
   const myBase = document.body;
   myBase.removeChild(this.PanelPtr);
   myBase.removeChild(this.PanelHed);
   this.CleanPage();
 }
 // -------------------- Remove Page---------------------------------------
 CleanPage()
 {
   const myNode = this.PanelPtr;
   while (myNode.lastElementChild)
      myNode.removeChild(myNode.lastElementChild);
   this.PgMess.value = "";
 }
//----------------------------------- Changing page to page of page----------------------------
  Page_of_page(BegPage ,  FinalPage, PageDisc)
  {   
   var PgVPtr=0 , PgLn = -1;
   var PgData="";

   
   for (var Pg = BegPage-1 ; Pg < FinalPage ; Pg++) {    	
       PgLn = this.Book[Pg].length;

       for (var line=0; line < PgLn; line=line+1) {
          PgData = this.Book[Pg][line].Dat;
          PgVPtr = this.Book[Pg][line].Ptr;

          if (this.VarArr[PgVPtr].VrWpTyp==("P"))
             this.Book[Pg][line].Dat = PgData + " of " + FinalPage-PageDisc.toString();             
     }
   }
  } 
//-------------------------------- Evaluate Expression------------------------------   
  Calc_Formula( Pos ) {
      var stack = new Stack();
      var tmp = "",first="",second="", opers = "+-*/", Formula ="";
      var mrk, ForPtr=-1, a, b;
      var Fptr = FormArr.length;
     
      // Get the poiter of the destination Variable      
      for ( var i=0 ; i < Fptr ; i++ ) {
      	if ( this.FormArr[i].ForName == this.VarArr[Pos].VarName) { 
      	   Formula = this.FormArr[i].ForEqua;
      	   ForPtr = i;
      	   break;
      	}   
      }	 
      
      // if obtained the pointer and the formula is not blank
      try{
         while ( Formula.length > 0 && ForPtr > -1)  {
            if (opers.indexOf(Formula.substring(0,1 )) == -1) {
                mrk = Formula.indexOf(",") ;

               if (  mrk == -1 )
                  mrk = Formula.length;

               tmp = Formula.substring(0,mrk);
            
               if ( mrk == Formula.length)
                  Formula = "";
               else   
                  Formula = Formula.substring(mrk+1,Formula.length);   

               stack.push( tmp );
            }   
            else {
               first   = stack.pop();  
               second  = stack.pop();

               a = parseInt( first);
               b = parseInt( second);                            
             
               if (Formula.substring(0,1) == '+')
                  a = b + a;
               else if (Formula.substring(0,1) == '-')
                  a = b - a;
               else if (Formula.substring(0,1) == '*')
                  a = b * a;
               else if (Formula.substring(0,1) == '/' ) {
                  if ( a != 0 )
                     a = b / a;
                  else
                     a = 0;     
               }
               Formula = Formula.substring(1,Formula.length);   
              
               tmp = a.toString(a);
               stack.push( tmp );
            }
         }   

         //  if a valid ppointer for destination
         if ( ForPtr > -1 ) {
            first = stack.pop();
         
            if ( first.substring(0,1)=="|") {
               mrk   = parseInt(first.substring(1,first.length));
      	       first = this.VarArr[mrk].VarTemp;
            }
         
            a = parseInt((first.trim().replace(",","")));
         
            //DecimalFormat decimalFormat     = new DecimalFormat("###,###,###.00");

            if ( this[ForPtr].FormArrForCond == 6 && a < 0.00 )
               first = "";
            else if ( this[ForPtr].ForCond == 7 && a > 0.00 )
               first = "";
            else
               first = a.toString();
             //  first = String.valueOf(decimalFormat.format(a));  

         }   
         else
            first = "";
    }            
    catch(e)
      {   
        alert("Formula calculation" + e.message);
    }    
    return first;
 }
//------------------------ convertToPostfix ---------------------------------------
// called from actprt to store the formula in postfix form
   convertToPostfix(Formula ) {
      opstk  = new Stack();
      out    = "";
      opers  = "+-*/()";
      HoldVar= "";
      topsym = '+';
      empty  = false;
      start  = false;
      Idx    = 0;  

      for (var i = 0; i < Formula.length(); i++) {
         if (opers.indexOf( Formula.substring(i,i+1)) == -1) {
            if ( !start )  {
               start  = true;
               HoldVar = Formula.substring(i,i+1);
            }   
            else
               HoldVar = HoldVar + Formula.substring(i,i+1);
         }      
         else {
            if ( start ) {
               start = false;

       	       if ( HoldVar.substring(0,1) >=  'A') {
            	  if ( HoldVar.length() < 8 ) 
       	     	     HoldVar = HoldVar.padStart(8," ");

       	          Idx = Get_VarPos (HoldVar);
       	          HoldVar = "|" + Idx.toString();         	          
               }     
         	       
       	       HoldVar=HoldVar+",";     
               Out = out + HoldVar;
            }     
            while ( ! (empty = opstk.isEmpty())
                &&  precedence(topsym = opstk.pop(), Formula.substr(i,i+1) ) )
               out.append(topsym);

            if ( ! empty)   
               opstk.push(topsym);

            if (empty || Formula.substr(i,i+1) != ')') 
               opstk.push(Formula.substr(i,i+1));
            else                              
               topsym = opstk.pop();
         }
      }   
      
      if ( start ) {
         if ( HoldVar.charAt(0) >=  'A') {
     	    if ( HoldVar.length() < 8 ) 
     	       HoldVar = HoldVar.padStart(8," ");

            Idx = Get_VarPos (HoldVar);
            HoldVar = "|" + Idx.toString();         	          
         } 
         
         HoldVar=HoldVar+",";     
         Out = out + HoldVar;
      }                 

      while ( ! opstk.isEmpty()) 
         out=out || opstk.pop() ;
      
      return out;
   }
//------------------Precedence check ---------------------------------------------------------------
 precedence( a, b ) {
      var high = "*/", low = "+-";

      if (a == '(') 
         return false;     // if (a == '(' && b == ')') return false;

      if (a == ')'  &&  b == '(') 
         return false;

      if (b == '(') 
         return false;

      if (b == ')') 
         return true;

      if (high.indexOf( a ) > -1  &&  low.indexOf( b )  > -1) 
         return true;

      if (high.indexOf( a ) > -1  &&  high.indexOf( b ) > -1) 
         return true;

      if (low.indexOf( a ) > -1   &&  low.indexOf( b )  > -1) 
         return true;

      return false;
   }          
}
/*------------------------------End of   Print------------------------------------ */

//-----------------------       GRID   -----------------------------------
class Grid {
   // index 0 is not used in Column serial . 
   // Index zero is used in all other arrays.
   // and record no starts from 1
 
   GrdItmGrd  = 0;      //  General Item Pointer of this grid 
                        //  which stores grid no   
   GrdColDom  = [];     //  DomHand of screen items   
   // array for column 
   GrdColSer  = [];     //  general pointer - Index starts from 1  
                        //  Item will store this subscript in DomHand       
   GrdActCol  = [];     //  Display Action of column[Col]           
   GrdCmpTyp  = [];     //  Comp Type Of Column.
   GrdCntTyp  = [];     //  Content Type Of Column.
   GrdColWid  = [];     //  width of column 
   GrdColLbl  = [];     //  lable of column [col serno] of grid being defined   
   GrdLsdDfv  = [];     //  Keeps default value of S type list bo[Column Ser]   
   GrdDupChk  = [];     //  Seq No of the columns for dupchk   

   // Array for column of each record 
   GrdColVal  = [];     //  value of grid columns
   GrdActDis  = [];     //  Display Action [Ptr of rc cl]            

   GrdDelAll  = false;
   GrdInsAll  = false;
   GrdAddAll  = false;

   GrdDupSts  = false;  //  Grid has dupchk if true        
   GrdRno     = 0;      //  Total record of grid                     
   GrdCurRsc  = 0;      //  current screen record
   GrdFcr     = false;  //  Grid field created true/false  
   GrdCno     = 0;      //  Max col no of GRD      
   GrdShwRec  = 0;      //  No of records shown on screen  
   GrdShwFst  = 0;      //  Record No of first record    
   GrdRnw     = 0;      //  number of new record.      . 
   GrdCurCol  = 0;      //  current column of Grid      
   GrdRecUpl  = 0;      //  Keeps last record used by    
   GrdRecPnd = false;   //  Grid Record pending      
   GrdHlp = false;      //  Help Grid         
   //-------------------------------------------Related to two diementional Grid----------------------
   RelatedGrd = [];
   MaxRelGrd  = 0;    
   Grd2Dim    = false;         //  true if two dimentional grid , else false
   GrdArrCur  = 0;             //  Current level 1 substript is 0 based   
   GrdFirst   = [];  // outer array. for each record of related arr
                      // this will hold a grdcol array
/*  ---------------------------------S C R O L L --------------------------------   
   VerScroll  = [] // scroll bar object
   GrdCntNam  = []; //  Name  of Column showing the count of grid records
*/
// Since Array index starts from 0 , subtract 1 when translating col,row to index
//----------------------------------------Constructor ----------------------------------------------------------------
  constructor(AddDelIns,x,y,w,h,RowNo,ItmPtr,Hlp)
      {
      this.GrdXax      = x;
      this.GrdYax      = y;
      this.GrdWid      = w;
      this.GrdHei      = h;
      this.GrdShwRec   = RowNo;
      this.GrdRno      = 0;
      this.GrdCurRsc   = 0;
      this.GrdCurCol   = 0;
      this.GrdCno      = 0;
      this.GrdShwFst   = 1; 
      this.GrdDupSts = false;
      this.GrdDupChk.push(0);
      this.GrdDupChk.push(0);
      this.GrdDupChk.push(0);
      this.GrdDupChk.push(0);                        
      this.GrdFcr      = false;
      this.GrdRecPnd   = false;
      this.GrdItmGrd  = ItmPtr;

      if ( Hlp == 0)
         this.GrdHlp = true;
      else                       
         this.GrdHlp = false;            

      this.GrdDelAll  = false;
      this.GrdInsAll  = false;
      this.GrdAddAll  = false;
      var Adi = AddDelIns.codePointAt(0);

      if (Adi >= 64) {
         this.GrdAddAll = true;
         Adi = Adi-64;
      }

      if (Adi >= 32) {
         this.GrdAddDel = true;
         Adi = Adi-32;
      }

      if (Adi == 16)
         this.GrdAddIns = true;
          
 } 
//-------------Set Colur of a Row ------------------------------------------------------
   Set_Row_color (  Pair , ScrRow, Base)
     {
      // base is not used . but may be used in future     	
      for ( var ii = 1 ; ii <= this.GrdCno ; ii++) {  	 	
         if (this.GrdCmpTyp[ii]=="T")           	
            Utils.Set_Color(this.GrdDomRsc(ii, ScrRow) , Pair );         	        
      }
   }
 //------------------ Grid Item Pointer -------------------------------------------------------------    
  Get_Grd_Itm(Grd)   
     {
       // Grd is the grid no . Returns the item pointer
      return GrdItmGrd;
    }
//---Grd Get Last Column in a Row--------------------
   GrdEnbCll(Rc)  
   // Get Last enabled column
   {   
     Rtn = 0;
     
     for (var Cl = this.GrdCno ; Cl > 0 ; Cl--)  {
        if (this.GetActDis(Cl,Rc) > 3 ) {
            Rtn = Cl;
            break;
        }
     }
     return Rtn;
   }
//---Grd Get First Column in a Row---------------------------------------------------------------
   GrdEnbClf(Rc)  
   // Get First enabled column
   {   
     Rtn = 0;
     
     for (var Cl = 1 ; Cl <= this.GrdCno ; Cl++)  {
        if (this.GetActDis(Cl,Rc) > 3) {
            Rtn = Cl;
            break;
        }
     }
     return Rtn;
   }
//----------------------------------------Get from Grid Store------------------------
   GrdGetVal (Cl , Rw)
    {
      var Ret,indx;
      indx = (Rw-1) * this.GrdCno + Cl-1;

      Ret = "";      
	
      if ( this.Grd2Dim) {	
         if ( this.GrdColVal.length > this.GrdArrCur)  {
               if ( this.GrdColVal[this.GrdArrCur].length > indx )  
               Ret =  this.GrdColVal[this.GrdArrCur][indx];
         }
      }   
      else {
         if ( this.GrdColVal.length > indx )  
             Ret =  this.GrdColVal[indx];
      }               
      return Ret;      
 }     
//----------------------------------------Using Scr get Grid Store------------------------
   ScrGetVal (Cl , Sc) {
       return this.GrdGetVal (Cl , this.ScrToRec(Sc));
  }
//----------------------------------------Using Scr set Grid Store------------------------
   ScrSetVal ( Vin , Cl , Sc) {
       this.Grd_Store_Val (Vin , Cl , this.ScrToRec(Sc));
  }
//----------------------------------------Set Grid Store------------------------
   Grd_Store_Val ( Vin , Cl , Rw)
    {
      var indx = (Rw-1) * this.GrdCno + Cl-1;
      
      if ( this.Grd2Dim) {	      
         // Add array element till it reaches the current index 
         if ( this.GrdColVal[this.GrdArrCur].length <= indx )  {
      	    for ( var ii = this.GrdColVal[this.GrdArrCur].length; ii <= indx; ii++) 
               this.GrdColVal[this.GrdArrCur].push("");
         }

         this.GrdColVal[this.GrdArrCur][indx] = Vin;                          
      }
      else  {
         // Add array element till it reaches the current index    
         // Not needed
         //if ( this.GrdColVal.length <= indx )  {
      	 //   for ( var ii = this.GrdColVal.length; ii <= indx; ii++) 
         //      this.GrdColVal.push("");
         //}
         this.GrdColVal[indx] = Vin;
      }             
      
      this.GrdRno = this.CalcRno();   
  }
//-------------------------------- Set value in grid fields ---------------------------
  Grd_Set_Values(Val , Cl , Rw ) 
  {
     var Dh,RecNo = Rw,UpdateRec=0;
     // when setting value , we should not change current record no, except in 
     // the case where current record is 0. This is to solve the problem of 
     // Command error when value is set to a list box with type 'D';

     if (this.GrdCurRsc == 0)
        this.GrdCurRsc = RecNo; 
      
     if ( RecNo <= 0 ) 
        RecNo = this.ScrToRec();

     if (RecNo > this.GrdRno )
        this.GrdRno = RecNo;   
              
     // cur recno of this grid    
     if ( RecNo == 0 )
        UpdateRec = this.GrdRecUpl;
     else
        UpdateRec = RecNo;
   
     // if it is a list box of type S , add to all the screen rows of that column.
     // if default set in current record only. 
     // <IMP> if grid contains only list fields,  It will not update GrdRno; 
     if (this.GrdCmpTyp[Cl]=="L") { 
        var defChk = Val.substring(0,1);  
        var DefVal = Val.substring(1,Val.length);

        // screen update of default is done below for all lists. 
        // so handle only storing in value array / def array
        // advance default value is preceeded by two ~ 
        var St, En;

        if (this.GrdCntTyp[Cl]=="S")
          {
            St = 1;
            En = this.GrdShwRec;
          }
        else
         {
            St = UpdateRec;
            En = UpdateRec;
        }                               

        if (defChk=="~") {
           if ( DefVal.substring(0,1)=="~") {   
              this.GrdLsdDfv[Cl] =  DefVal.substring(1,DefVal.length); 
              Dh = null;  // this is advnced default. no need of adding on screen
           }
           else             
              this.Grd_Store_Val(DefVal,Cl,UpdateRec);     
              if (On_Screen(UpdateRec)) {
                 Dh = GrdDomRec(Cl, UpdateRec);
                 Dh.value = Val;
              }
           }
        else 
         { 
           // Do it for all the records on the screen for the column
           for ( var ii=St;  ii <= En;   ii++ ) {
               if (this.On_Screen(ii)) { 
                  Dh = this.GrdDomRec(Cl, ii);
                  Dh.value = Val;
               }
               /*var option = document.createElement(ToSet); // set name same as value
               option.value = ToSet;
               option.text  = ToSet;
               Dh.appendChild(option);
               //Dh.add(option)  alternative
               //<IMP>if (!(Dh.prop('selected')))  correct later          
               //   Dh.setSelectedIndex(0);*/

                                                         
              if (!(this.GrdLsdDfv[Cl]) ) {           
                 //ListArr[ActPtr].setSelectedIndex(0);
                 this.ScrSetVal(Val,Cl,ii); 
              }
           }   
        }                 
     }   	  
     else // non list items
        this.Grd_Store_Val ( Val , Cl , UpdateRec)

     if (RecNo   > 0 )
        this.GrdRecUpl = UpdateRec;


     // set on screen
     if (this.On_Screen(UpdateRec)) {
        Dh = this.GrdDomRec(Cl, UpdateRec);
    
        if (this.GrdCmpTyp[Cl]=="B")
           Dh.innerHTML = Val;
            
        else if (this.GrdCmpTyp[Cl]=="T")
           Dh.value = Val;            
     }               
  }  
 //------------------------------------Clear arraylist--------------------------
   GrdClear()
    {
      if (this.Grd2Dim) {
         for ( var ii = 0 ; ii < this.GrdColVal[this.GrdArrCur].length; ii++ )       	
            this.GrdColVal[ii] = [];
         this.GrdArrCur = 0;   
      }                             
      else
         this.GrdColVal=[];
 
      this.GrdRno = 0;   

  }
 //------------------------------------Clear arraylist of one -----------------------
   Grd2Clear(Sub)
    {
      if (this.Grd2Dim) 
         this.GrdColVal[Sub] = [];
  }
//----------------------------------------Copy from record to record------------------------
   GrdCopVal (Rin , Cout , Rout )
    {
      this.Grd_Store_Val ( this.GrdGetVal(Cout , Rin) , Cout , Rout );
 }     
//----------------------------------------  Set GrdArrCur  ------------------------
 Set_GrdArrCur(TabCur)
  {
    this.GrdArrCur  = 	TabCur - 1;
//<ZERO> double
    if (this.GrdColVal.length <= this.GrdArrCur )  {
       for ( var ii = this.GrdColVal.length; ii <= this.GrdArrCur; ii++) {
           this.GrdColVal = [];
           this.GrdFirst.push(this.GrdColVal);
       }    
    }    
               	
    this.GrdColVal[GrdRno] = CalcRno();
  }
//---------------Calculate record number from arraysize------------------------
 CalcRno()
  {
    var Rno;
  	
    if (this.Grd2Dim) 	{
       Rno =  (this.GrdColVal[this.GrdArrCur].length) / GrdCno;

       if (Number.isInteger(Rno))
           Rno++;
    }
    else {
       Rno =  this.GrdColVal.length / this.GrdCno;
       if (!(Number.isInteger(Rno)))
           Rno++;
       Rno = Math.trunc(Rno);
    }
   
    return Rno;  	        
 }     
 //----------------------------------------  Set GrdArrCur  ------------------------
  Get_GrdArrCur()
  {
    return this.GrdArrCur + 1;      
 }      
//----------------------------------------  Set GrdArrCur  ------------------------
 Check2Dim()
  {
      return this.Grd2Dim;
 }
//----------------------------------------  Set GrdArrCur  ------------------------
   Second_Dim ()
    {
      this.Grd2Dim =true;	
      this.GrdColVal.push("");      
 }     
//----------------------------------------  Add Relation  ------------------------
   Add_Relation(Kid)
    {
      this.RelatedGrd[this.MaxRelGrd] = Kid;       
      this.MaxRelGrd++;	
 }     
//------------------- Record no to screen------------------------------------    
    RecToScr(Rc)   
     {
       return  Rc - this.GrdShwFst + 1;                                                                 
     }
 //------------------- Screen to record------------------------------------    
    ScrToRec(Sc)   
     {
       return  Sc + this.GrdShwFst - 1;                                                                 
     }
 //------------------- Screen to record------------------------------------    
    ScrToRec()   
     {
       return  this.GrdCurRsc + this.GrdShwFst - 1;                                                                 
     }
//---------------------Return DomHandle of a column and a screen rec----------
   GrdDomRsc (Col, Rsc)
     {
      return this.GrdColDom[ (Rsc-1) * this.GrdCno + Col -1];
  }  
//--------------------- Return DomHandle of current screen column-----------------------------------------
   GrdDomCur ()
      {
        return this.GrdColDom[ (this.GrdCurRsc-1) * this.GrdCno + this.GrdCurCol -1];
  }  
//---------------------Return DomHandle of a column and a currecnt sreen rec----------
   GrdDomCol (Col)
    {
      return this.GrdColDom[ (this.GrdCurRsc-1) * this.GrdCno + Col -1];
  }  
//---------------------Return DomHandle of a column and a Rec----------
   GrdDomRec(Col,Rec)
    {
      return this.GrdColDom[ (this.RecToScr(Rec)-1) * this.GrdCno + Col -1];
  }  
//----------------------Set DomHandle of a column and a screen rec----------
   SetGrdDom (DH,Col,Rsc)  {
      this.GrdColDom[ (Rsc-1) * this.GrdCno + Col - 1] = DH ;
  }  
//-------------------------set Act dis a column and a Rec------------------------------
   SetActDis(ActDis,Col,Rec)
    {
      this.GrdActDis[this.GrdCno * (Rec-1) + Col-1] = ActDis;
  }  
//---------------------Return  Act dis of a column and a Rec----------------------------
   GetActDis( Col,Rec)
    {
      return this.GrdActDis[this.GrdCno * (Rec-1) + Col-1];
  }  
//-----------------Grid Locate------------------
Grd_Locate ( It , Col , RecNo )
  {
    if (!(RecNo <= 0  || RecNo > this.GrdRno)) {            
       if (It=="DELETE" || It=="INSERT")   
          this.DelIns_Record(Itmname.substring(0,1),RecNo); 
       else { 
          var Old = this.GrdCurRsc;
          if (RecNo == this.GrdRno+1 ) {
             if ( this.GrdAddAll)  {
                this.Init_Record(RecNo);                              
                this.Record_Shift (this.GrdCurRsc , 40 , Col );
             }
             else {  // Nothing happens
                RecNo = this.GrdRno;
                this.GrdRnw = 0;
            }                               
          }                         
          else {
             // <IMP> CHECK for next enabled item    
             this.GrdCurRsc = this.RecToScr(RecNo);
                 this.Grd_Set_Screen(RecNo, Col, Old );
          }
      }	                     
    }
 }
//-----------------Grid balance of OP------------------
Grd_OP( Lk )
  {
     if (Lk >= 33 && Lk <= 40  && Lk != 37 && Lk != 39 ) 
     {  // Record shifting keys 
        Record_Shift (this.GrdCurRsc , Lk, this.GrdCurCol);
     }
     else {
        this.GrdCurCol = this.GrdCurCol + 1;
        if (this.GrdCurCol > this.GrdCno)
            this.GrdCurCol = 1;

        var Dh = this.GrdDomRsc(this.GrdCurCol, this.GrdCurRsc);
        Dh.focus();
     }
 }   
//-------------------------------- To shift to grid ---------------------------
//check recno ?? 
 DelIns_Record(Action,Rnum ) 
  {   
      OC , CR ,  Rc, Rec;  // int
      Typ , SameDiff;      // string
      To_Set_Col = true;   // boolean
         
      Rec = ScrToRec(GrdCurRsc);
      
      if ( Action=="D")  {         
         CR  = Rec;
         OC  = GrdRno;

         while ( CR < OC ) {            
            for ( var Cl = 1 ; Cl <= GrdCno ; Cl++ ) {
               if ( !(GrdGetVal(Cl , CR)))  
                     Grd_Store_Val("", Cl , CR);
               // <IMP> Numeric should get "0" ?       
               GrdCopVal( CR+1 , Cl , CR);
            }               
            CR=CR+1;
          }

          Init_Record( Grd , OC);  
          GrdRno = OC - 1;
      }    
      else  { 
         OC  =  GrdRno+Rnum;      
         GrdRno = OC + 1;      
         CR  = Rec;
         
         if ( Rnum > 0 )
            CR = CR + 1;
      
         while ( OC >= CR ) {            
            for ( var Cl = 1 ; Cl <= this.GrdCno ; Cl++ ) {
               if ( this.GrdGetVal(Cl , CR) == null) 
                     this.Grd_Store_Val("", Cl , CR);
               // <TMP> ?? "0" in numeric       
               GrdCopVal( OC , Cl , OC+1);
            }
                          
            OC = OC - 1;
          }
          Init_Record(Grd,CR);                
      }    

      this.Grd_Shw_Scr(Rec);

      if (  To_Set_Col ) {
         this.Set_Row_color ("GRIDSEL" , this.GrdCurRsc , 0);
         To_Set_Col = false;    
      }
      GrdCurCol = 1;                     
  }
//-------------------------------------------- Initialise a Record ------------------------------------------------------------    
   Init_Record( Rc)   
   { 
     var DH;

     if ( this.GrdRno < Rc) {
          this.GrdRno= Rc;
          this.GrdRnw= Rc;
     }
     for ( var Cl = 1 ; Cl <= this.GrdCno ; Cl++ ) {
        if (this.GrdCmpTyp[Cl]=="T" && this.GrdCntTyp[Cl]=="N" )
           this.Grd_Store_Val("0",Cl,Rc);
        else
	   this.Grd_Store_Val("",Cl,Rc);

        //<IMP>  setting default in list       
        if (this.GrdCmpTyp[Cl]=="L" && this.GrdCntTyp[Cl]=="S") { 
           DH=this.GrdDomRec(Cl, Ln)
           DH.value=this.GrdLsdDfv[Cl]; // Set Default on screen         
        }
        this.SetActDis(this.GrdActCol[Cl],Cl,Rc);
     }              
  }
//--------------------------------- Shift_Record_New-------------------------------------------------------------------
  Shift_From_New ()
    {
    	
     var Ptr =0  , Cl =0;
      	
     GrdRno = GrdRno - 1;
     GrdRnw = 0;

     Cl = GrdEnbClf(this.GrdRno);
                         
     Record_Shift ( this.GrdCurRsc , LastKey , 1 ); 
     // Record shif calls Show_row and if column > 0 set  currptr
     var DH = this.GrdDomRec(Cl, Ln);                     
     DH.focus();
  }
// <CORRECT>    
//-----Calculate Record on shifting key and show the current record-------------------
    Record_Shift ( ScrRec, Kp , Cl )
     { 	
     	var RcNew=0 , RcOld = this.ScrToRec(ScrRec) , Col=Cl , OldRsc=ScrRec;
        var End = false;
        
        if (Kp ==34 )                       // Page Down
  	   RcNew = RcOld + this.GrdShwRec;
  	else if (Kp ==33 )                 // Page Up
  	   RcNew = RcOld - this.GrdShwRec;
  	else if (Kp ==40 )                 // Down Arr
  	   RcNew = RcOld + 1;
  	else if (Kp ==38 ) 
  	   RcNew = RcOld - 1;              // Up arrow 
  	else if (Kp ==35 )                 // End
  	 { RcNew = GrdRno;
  	   End   = true; 
        }
  	else if (Kp ==36 )                 // Home
  	   RcNew = 1;
 
        if ( RcNew <= 0 )
           RcNew = 1;   
    
        /*-----------------------------------------------------
        Pending reocord fetch is done in analyse function itself
        if ( this.GrdRecPnd ) {
           if ( RcNew+ this.GrdShwRec-1 > this.GrdRno) 
                this.Get_Pending_Records (RcNew);
           else if ( End ) {
                this.Get_Pending_Records (0);
                RcNew = this.GrdRno ;
           }     
        }              
        ---------------------------------------------------------*/
        if (  RcNew > this.GrdRno  )  
              RcNew = this.GrdRno; 
 
        if ( RcNew != RcOld && RcOld > 0) 
           this.Grd_Set_Screen(RcNew, Col, OldRsc);                  
    }   
//---------------------------------Grd_Shw_OneRow-----------------------
Grd_Shw_Scr(FrmScrRow)
  {   
    var Rc , Typ, DH, Val , StatDynam;

    for ( var Ln = FrmScrRow ; Ln <= this.GrdShwRec; Ln++ ) {
       for ( var ShwCl = 1 ; ShwCl <=  this.GrdCno ; ShwCl++) {
          Rc       =  Ln+this.GrdShwFst-1;
          Typ      =  this.GrdCmpTyp[ShwCl];
          StatDynam=  this.GrdCntTyp[ShwCl]; 
 
          if (Typ=="T") {
             if (Rc > this.GrdRno ) {
      	        DH = this.GrdDomRsc(ShwCl, Ln); 
                DH.value = "";
             }
             else {    	 	
                Val = this.GrdGetVal(ShwCl, Rc);
      	        DH = this.GrdDomRsc(ShwCl, Ln); 
                DH.value = Val;

                if (this.GrdHlp)  
                   Utils.Set_Color(DH,"HLPDISP");
                else {
                   //  <IMP> release after focus is enabled on disabled 
                   //  if ( Ln == 2 && Cl == ShwCl )
                   //  DH.focus();

                   var ad = this.GetActDis(ShwCl, Rc);
                   if (ad < 4) 
                      Utils.Set_Color(DH,"GRIDDISP");
                   else
   	              Utils.Set_Color(DH,"GRIDENT");

                } // else
             }  // else
         }   // type checking if             

         if (Typ=="L") {
            if (Rc <= this.GrdRno ) {
               // Load diff content of each row into list
 	      
               Val = this.GrdGetVal(ShwCl, Rc);
               if (StatDynam=="D" ) {                   	  
         	   DH = this.GrdDomRsc(ShwCl, Ln); 
                   DH.value = val;
                   //  ListArr[this.SwnPtr(ShwCl, Ln)].removeAllItems();	
          	   //      ListArr[this.SwnPtr(ShwCl, Ln)].addItem(Val); 	   
               }
               //ListArr[this.SwnPtr(ShwCl, Ln)].setSelectedItem(Val); 
             }
         }
                
         if (Typ=="K") {
       	    if (Rc <= this.GrdRno ) {
               Val = this.GrdGetVal(ShwCl, Rc);
               DH  = this.GrdDomRsc(ShwCl, Ln); 
         	      
               if (Val="true")
         	  DH.value = val;
               else
         	  DH.value = val;
            }
         }  // typ == K                  

     }  //Inner For
    }     //Outer For
  }
//------ Locate current row and if not on screen. If shifted out of screen, 
// calculate the first line to be shown and call Grd_Shw_scr------    
   Grd_Set_Screen(NowRec, Cl, OldRsc)   
     {   	
       var Rc = NowRec;       
       var Typ , SameDiff , Val="";       	

       // 2 type of calls  1. Call comes with Cl > 0 . After showing new record , 
       //                     Curritem to be set .  
       //                  2. Call comes with Cl = 0   Dont set curritem
       // if the record to be shown is less than the top record or greater than the last record
       if (  Rc < this.GrdShwFst  ||  Rc >=   this.GrdShwFst + this.GrdShwRec ) {
          if ( Rc == this.GrdShwFst + this.GrdShwRec  &&  this.GrdCurRsc == this.GrdShwRec) {
             //  if downarrow and cursor is at last line, bring up only to show the expected record
             //  at the last row and highlight last row;
             this.GrdShwFst = this.GrdShwFst + 1;
             this.GrdCurRsc = this.GrdShwRec;
          }            
          else if (Rc == this.GrdShwFst -1 &&  this.GrdCurRsc == 1 ) { 	  
              //  if uparr and cursor is at first line , bring down only to show the
              //  expected record at the firsg row 
       	     this.GrdShwFst = this.GrdShwFst -1;
       	     this.GrdCurRsc = 1;
          }
          else if  ( Rc <  this.GrdShwFst  && Rc >= this.GrdShwFst - this.GrdShwRec) {    
             //  if Pageup bring down a page
             //  Page up can be pressed from anywhere. Rc is calulated from current RC
             //  So we need to reducs the number of current screen line 
             this.GrdShwFst = this.GrdShwFst - this.GrdShwRec; 

             if ( this.GrdShwFst < 0 )
                  this.GrdShwFst = 1;

             this.GrdCurRsc = OldRsc;
          }             
          else if (Rc >= this.GrdShwFst + this.GrdShwRec && Rc < this.GrdShwFst + 
                    this.GrdShwRec+ this.GrdShwRec)  {  	  
             //  if Page down bring up a page  
             this.GrdShwFst = this.GrdShwFst + this.GrdShwRec;
             this.GrdCurRsc = OldRsc;              
          } 
          else {
             if ( Rc > this.GrdRno-this.GrdShwRec)  	  
                this.GrdShwFst = this.GrdRno - this.GrdShwRec + 1;              
             else
                this.GrdShwFst = Rc; 
             this.GrdCurRsc = 1; 
          }
debugger;
          Rc = 1;
      
          this.Grd_Shw_Scr(Rc);

       }  // if
       else  {
          this.GrdCurRsc = this.RecToScr(NowRec); 

          if ( this.GrdHlp ) 
             this.Set_Row_color ("HLPDISP" , OldRsc , 3);
          else
             this.Set_Row_color ("GRIDDISP", OldRsc , 0);
       }      

       if ( this.GrdHlp ) 
          this.Set_Row_color ("HLPSEL" , this.GrdCurRsc,3);
       else
          this.Set_Row_color ("GRIDSEL", this.GrdCurRsc,0);

        /* // if this grid is related to a nested 2 level grid - 
        // show corresponding set of records on the related grid
        // if this grid is related to a nested 2 level grid - 
        //show corresponding set of records on the related grid

        for (var Kid = 0 ; Kid < this.MaxRelGrd; Kid++)
            Show_2DimL2(RelatedGrd[Kid],RecNo,false);


        for (var Kid = 0 ; Kid < this.MaxRelGrd; Kid++) {
           Rc = this.ScrToRec();
           this.Show_2DimL2(this.RelatedGrd[Kid], Rc ,false );
        }

        if (Cl > 0 ) {
           var Dm = this.GrdDomRec(Col,this.GrdCurRsc)
           Dm.focus();
           this.GrdCurCol = Col;
        }
  }
//------------------- Show the current data of a 2 Dim Grid------------------------------------    
    Show_2DimL2 ( CurNo , force)  // int , int , boolean
    {
       var DH;     // DomHand
      var ToSet , Typ;  //string
      
      if ( CurNo != this.Get_GrdArrCur() || force ) {
         // Set the first dimesion record;
         this.Set_GrdArrCur(CurNo);
         this.GrdShwFst = 1;
      
         for (var rc=1; rc <= this.GrdRno; rc++)
          {
            // need to show only the first showable lines	
            if ( rc > this.GrdShwRec )
               break; 	
       	
            for (var cl=1; cl <= this.GrdCno; cl++)
             {     	
               // both screen rec and actual rec are same 
               DH     = this.GrdDomRec(ShwCl, Ln); 
               ToSet  = this.GrdGetVal(cl , rc);    	
               Typ    = this.GrdCmpTyp[cl];
          
          
               if (Typ=="B")
                  DH.innerHtml = ToSet;           
               else if (Typ=="T")
                  DH.value = ToSet;
               else if (Typ=="K")
                  DH.value = ToSet;
               else if (Typ=="L")
                  DH.value = ToSet;            
            }
         }  	
         //  ------------------- Blank the rest rows------------------------------ 
         if (  this.GrdRno < this.GrdShwRec )
            {
             for ( rc=this.GrdRno+1; rc <= this.GrdShwRec; rc++)
               {
                 for ( cl=1; cl <= this.GrdCno; cl++)
                 {     	
                   DH     = this.GrdDomRec(ShwCl, Ln); 
                   Typ    = this.GrdCmpTyp[cl];
          
                   if (Typ=="B")
                      DH.innerHtml = "";           
                   else if (Typ=="T")
                      DH.value = "";
                   else if (Typ=="K")
                      DH.value = "";
                   else if (Typ=="L")
                      DH.value = "";            
                }
              }
         }
      }        	
  }    
// ------------------------------Grid List item deleting ------------------------   
  Grd_Del_Ent(Cl,En)
  {
    /*if S type, if ELEMENT IS 0 delete all entries else the specified entry of list
       in all records                                          
    if D type do the same for the current record;*/
    var Ln , i;

    if (this.GrdCntTyp[Cl] == "S")
    {
       Ln = this.GrdShwRec;
       i  = 1;
    }
    else
     {
       Ln = this.GrdCurRec;
       i  = this.GrdCurRec;
    }

    var DH;
   
    //---- Only One column List Box to be handled here . For all the screen records
    for ( var k=i; k <= Ln ; k++)  {               
        DH = this.GrdDomRec(Cl,k);
        // <IMP> Check if record store also has to be cleare
        //  and correstposnding systax for clear all and item at                          

        for (var i = 0 ; i < DH.length ;  i++) {
               if ( En == i+1 || En == 0 )
       	            DH.remove(i);
        }
     }
 }
// ------------------------------Grid  Leaf item clearing ------------------------   
  Grd_Clr_Leaf(Cl)
     { 
        var Dh;
    	//---- Only One column to be handled here ---------
        for (var i = 1; i <= this.GrdRno ; i++)  {
           this.Grd_Store_Val("",Cl,i) ;  
           // Variable holding column data is set to null for all records 

           if ( this.On_Screen(i))  {
              if ( this.GrdCmpTyp[Cl] == 'T' )  {
                 Dh = this.GrdDomRsc(Cl, i);                
                 Dh.value = ""; 
                 //Utils.Set_Color(TextArr[Irec],"GRIDDISP");
              }   
              // if list item of type D(ifferent) remove all elements (D is used only in Grid). 
              else if ( this.GrdCmpTyp[Cl] == "L"  &&  this.GrdCntTyp[Cl]=="D" ) {          
                 Dh = this.GrdDomRsc(Cl, i);                
                 Dh.value = ""; 
              }                 //<IMP> list clearing                
           }
        } //for
    }     
 //------------------   Clearing grid as a whole  ---------------------------------------    
  Grd_Clr_Grd(Sub) {
     for ( var ii=1; ii <= this.GrdCno; ii++) 
        this.Grd_Clr_Leaf(ii)

     this.GrdRno       = 0;
     this.GrdCurRsc    = 1;
     this.GrdCurCol    = 1;
     this.GrdShwFst    = 1;            
            
     if ( Sub == 0 )
        this.GrdClear();
     else  
        this.Grd2Clear(Sub);

     //this.Set_Row_color ("GRIDDISP",GrdCurRsc,3);     
  }
 //------------------   Check whether the record is on screen  ---------------------------------------    
   On_Screen (Rc)   
     {
        if ( (Rc >= this.GrdShwFst + this.GrdShwRec )  || Rc < this.GrdShwFst)
           return false;
        else           
           return true;   
    }
}
//---------------------------Menu Class------------------------------------------
class Menu {   
   Parent  = document.body;
   SysDet  = {DHand: document.body , Sid: ' '};   
   Sys     = [];  
   MHand   = [];
   PHand   = document.body;
   CurrSys = -1;
   Scnt    = -1;
   xsloc     = 0;
   ysloc     = 40;
   yloc      = 60;
   xloc      = 0;
   wid       = 120;
   offset    = 20;

   constructor(PRNT) {
      this.Parent = PRNT;
   }

   ShowMenu(Subs,Nam) {
      var Ind = Subs;
      var Xax = this.xloc;
      var Yax = this.yloc;

      if ( Ind == -1)   // coming from menu item
           Ind = this.CurrSys; // if it is coming from menu item , system is current sys

      // if there is a system change or it is a menu item do this. 
      // otherwise keep quite

      if ( this.CurrSys != Ind || Nam.substring(0,1) ==  'M') {
         // if control is here due to a system change, hide previous menu 
         if ( this.CurrSys > -1) {  
            var Children = this.Sys[this.CurrSys].DHand.childNodes;
            for(var i = 0; i < Children.length; i++){
               var a = Children[i];
               a.style.visibility = "hidden";
            }
            // hide current shystem
            this.Sys[this.CurrSys].DHand.style.visibility = "hidden";
         }

         var Children = this.Sys[Ind].DHand.childNodes;
         var PgOn = false;

         // show div correspoding to the system selected
         this.Sys[Ind].DHand.style.visibility = "visible";
         
         for(var i = 0; i < Children.length; i++){
             var a = Children[i];
             var Tp = a.name.substr(0,1);

             // check if this is the selected menu
             if (Tp=='M') {
                if (a.name==Nam )
                   PgOn = true;
                else
                   PgOn = false;
             }     

             // show only menu and programs under selected menu
             if ( Tp == 'M' || PgOn) {
                   var Indent;

                   if (  a.name.substring(0,1) == 'P' )
                      Indent = Xax + this.offset;
                   else
                      Indent = Xax;

                   a.style.position = "absolute";
                   a.style.left     = Indent.toString() + "px";
                   a.style.top      = Yax.toString() + "px";
                   a.style.width    = this.wid.toString() + "px";
                   a.style.height   = '20'  + "px";
                   Yax = Yax + 20;
                   a.style.visibility = "visible";
             }
         }
         this.Sys[Ind].DHand.style.height = (Yax - this.yloc);
         this.CurrSys = Ind;         
      }
   }   

   MenuObj( Child,Prnt,OTitle,Id,Typ) {
      // System :--> create a parahraph and store it in array. set name = 
      // array mnumber of paragraph
      // Menu or prog--> attach it to the paragraph corresponding to the system
      // and set name = last sys + record + key + Id
      // content: '\02795' ; /* Unicode character for "plus" sign (+) */
      // content: '\02796' ; /* Unicode character for "minus" sign (-) */

      Child.type="button";
      Child.innerHTML=OTitle;

      if ( Typ == 'S' || Typ == 'E' )  { // system and Logout key
         if ( Typ == 'S' ) {
            this.Scnt=this.Scnt+1;
            var Div = document.createElement("div");
            this.Sys.push(Object.create(this.SysDet));

            this.Sys[this.Scnt].DHand = Div;
            this.Sys[this.Scnt].DHand.style.position = "absolute";
            this.Sys[this.Scnt].DHand.style.left     = this.xloc.toString() + "px";
            this.Sys[this.Scnt].DHand.style.top      = this.yloc.toString() + "px";
            var PanHeight  = this.wid + this.offset;
            this.Sys[this.Scnt].DHand.style.width    = PanHeight.toString() + "px";
            PanHeight = parseInt(Programs[0].Items[0].DomHand.style.height);
            this.Sys[this.Scnt].DHand.style.height   = PanHeight.toString() + "px";         
            this.Sys[this.Scnt].DHand.style.background = "Yellow";
            //this.Sys[this.Scnt].DHand.style.color = "White";
            this.Sys[this.Scnt].DHand.style.visibility = "hidden"
            this.Sys[this.Scnt].Sid = Id; 
            Child.name = 'S' + this.Scnt.toString();
            Prnt.appendChild(this.Sys[this.Scnt].DHand);
         }
         else {
            Child.name = 'E' + Id;
         }

         Child.style.visibility = "visible"
         Child.style.color = "Red"; 
         Child.style.position = "absolute";
         Child.style.left     = this.xsloc.toString() + "px";
         Child.style.top      = this.ysloc.toString() + "px";
         Child.style.width    = this.wid.toString() + "px";
         Child.style.height   = '20'  + "px";

         this.xsloc = this.xsloc + this.wid;
         Prnt.appendChild(Child);
      }
      else {
         Child.style.background = "White";
         Child.style.color = "Blue";
         Child.name = Typ+this.Sys[this.Scnt].Sid.padStart(8," ")+"0000010"+ Id;
         Child.style.visibility = "hidden"
         this.Sys[this.Scnt].DHand.appendChild(Child);
      }
      Child.onclick = MenuTrap;       
   }

   MenuDistroy() {
      for (var Ss = 0; Ss < 2 ; Ss++) {
         try {
             var Children = this.Sys[Ss].DHand.childNodes;
             var x = this.MenuMDistroy(Children);
          }
         catch {
              var y =0
         }
      }
      return 0;
   }

   MenuMDistroy(Chl) {
      for (var Mn = 0; Mn < Chl.length; Mn++){
         var Children = Chl[Mn].childNodes;

         if (Children.length > 0)
            var z = this.MenuMDistroy(Children);

         Chl[Mn].parentNode.removeChild(Chl[Mn]);
      }
      return 0;
    }

   MenuCmd(Mcmd , Mtype , Title) {
      var Hnd;    
      if (Mcmd=="C")
        {
          this.Scnt    = -1;
      }   
      else if (Mcmd=="E")
        {
         var Hnd = document.createElement("button");
         this.MenuObj(Hnd,this.Parent,'Logout', 'LOGOUT<<' ,'E')
      }   
      else if (Mcmd=="S")
        {           
         var Hnd = document.createElement("button");
         this.MenuObj(Hnd,this.Parent,Title, Mtype,'S')
        }
      else if(Mcmd=="M")
       {  
         this.MHand[this.Lvl] = document.createElement("button");
         this.MenuObj( this.MHand[this.Lvl],null,Title,Mtype,'M');
       }
      else if(Mcmd=="P")
       {  
         this.PHand = document.createElement("button");
         this.MenuObj( this.PHand,this.MHand[this.Lvl],Title,Mtype,'P');
      }
      else if(Mcmd=="N")
       {  
         this.CompName = Title;
         document.title=Title;
      }
   }
 }
//----------------------------------------------------------------------------------
class program {
   //GenPtr is last item . CurrPos Stores Current 
   GenPtr = -1;
   //Gptr is last Grid. It starts from one. 
   Gptr   =  0;
   PrgNo  =  0;
   PrePrg = -1;
   CurrPos= -1;
   SetPos = false;

   constructor(Cnt) {
      this.GenPtr = -1;
      this.Gptr   = 0;
      this.PrgNo  = Cnt;
      this.PrePrg = 0;
      this.SetPos = false;
   }

   Grids = [0];   
   Items = [];  
   Hybernate = [];  
   MenuChar  = "*";
   PrintLevel   = -1;
   PrintCls  = [];
   PrintDest = "S";

   Widget = {ParName: ' ',ItmName: ' ',DomHand: document.body , DfCmpArr: ' ',CntTypArr: ' ',
              LengthArr: 0 ,DecimalArr: 0 ,FontArr: 0 ,ActDis: 0 ,ActVal: 0 ,
              SendFlg: false ,DomLabl: document.body};   

   FunPanWid     = 0;        //  Width of panel where Fun key / fun butt is diplayed
   FunKeysSts    = [13];     //  Special Keys Button Equivalents Status
   FunKeysLbl    = [13];     //  Special Keys Prompts 
   //this is for storing pointers of buttons created intead of function keys. 
   FuncButtArr   = [11] ;    // 0 is escape button 
   ListDflt  = [];           //  default value of List field    
   Formula = [] ;            // Count in Fptr Starting from 1
   SpkLabel = "";
   FontArr  = "";

   FunTstKey="" ;
   FunTstTs1=true;
   FunTstTs2=true;
   FunTstTvf=true;
   FunTstTtf=true;
   FunTstLbl=" ";
   FunTstMsg= " " ;     

   PreBlock = " ";
   ErrStr   = " ";
   
   GrdCur=0;
   DspPtr=0;
   FlyWidth=0;   
   Fptr=0;  // function ptr   
   font = " ";  

//------------------------------GetRecNo----------------------------------------------------
GetCurRec()
  {
    var Rc = 0;
    var PPos   =  this.GetParPos(this.CurrPos);

    if (this.Items[PPos].DfCmpArr==("G")) {   // parent is a grid
         // Grid number is stored in DomHand where as for all others it will be object
         // Similarly DomHand of item is the col ser no
         Rc = this.Grids[this.Items[PPos].DomHand].ScrToRec();
    }

    return Rc.toString().padStart(5,"0");
}
//------------------------------ArParPos----------------------------------------------------
 ArParPos(Itm)
  {
      var Pos =-1;
      for(var j = 0; j <= this.GenPtr ; j++) 
      {
          if(this.Items[j].ItmName == Itm)
            {
             Pos = j;
             break;
          }
      }
    return Pos;  
 }           
//---------------------------Enable stored panels ------------------------
  Show()
  {
    for ( var ii=0 ; ii < this.Hybernate.length; ii++)
       this.Hybernate[ii].style.visibility="visible";

    this.Hybernate = []

    if (Utils.Button) {
       for (var FB=0; FB < 11 ; FB++) {    //F0 is escape F1 is Help.  F13 and F14 are up and down .
            if ( ( this.FunKeysSts[FB] == 6 && FB > 0 ) ||
               ( Utils.ButtEsc && this.FunKeysSts[0]==6 && FB==0 ) ) 
                   this.FuncButtArr[FB].style.visibility = "visible";
       }
    }
    else
       this.SpkLabel.style.visibility = "visible";

    var PPos   =  this.GetParPos(this.CurrPos);

    if (this.Items[PPos].DfCmpArr==("G")) {   // parent is a grid
         // Grid number is stored in DomHand where as for all others it will be object
         // Similarly DomHand of item is the col ser no
         var Rc = this.Grids[this.Items[PPos].DomHand].GrdCurCol;
         var Cl = this.Grids[this.Items[PPos].DomHand].GrdCurRsc;
         Cl = this.Grids[this.Items[PPos].DomHand].ScrToRec(Cl); 
         this.Grids[this.Items[PPos].DomHand].Grd_Locate('........',Cl , Rc);
    }
    else
       this.Items[this.CurrPos].DomHand.focus();
 }
//--------------Disable active panels and store the panel Pos ------------------------
  Hide()
  {
    var Frame = this.Items[0].ItmName;
    for ( var ii=1 ; ii <= this.GenPtr; ii++)
    {
       if (this.Items[ii].ActDis > 1 && !(this.Items[ii].DfCmpArr == "U") 
          && !(this.Items[ii].DfCmpArr =="G")) 
          {
            var PP = this.ArParPos(this.Items[ii].ParName);
            if (this.Items[PP].DfCmpArr =="G")
              {
                var Gro = this.Grids[this.Items[PP].DomHand];
                var Sc  = Gro.GrdShwRec; 
                var Cl  = this.Items[ii].DomHand; 
 
                for ( var Rs = 1; Rs <= Sc; Rs++)  {
                   var Dh = Gro.GrdDomRsc (Cl, Rs);
                   Dh.style.visibility = "hidden";
                   this.Hybernate.push(Dh);
                }

                if (this.Items[ii].DomLabl)  {
                   this.Items[ii].DomLabl.style.visibility = "hidden";
                   this.Hybernate.push(this.Items[ii].DomLabl);
                }
            }
            else
               {
                this.Items[ii].DomHand.style.visibility = "hidden";
                this.Hybernate.push(this.Items[ii].DomHand);

                if (this.Items[ii].DomLabl) {
                   this.Items[ii].DomLabl.style.visibility = "hidden";
                   this.Hybernate.push(this.Items[ii].DomLabl);
                }
            }
       }   //if   
    }  // for

    if (Utils.Button) {
       for (var FB=0; FB < 11 ; FB++) { //F0 is escape F1 is Help.
                                    //Although F13 and F14 keypresses are not 
                                    //accepted , up and down is blocked through these 2.
          if ( ( this.FunKeysSts[FB] == 6 && FB > 0 ) ||
             ( Utils.ButtEsc && this.FunKeysSts[0]==6 && FB==0 ) ) 
               this.FuncButtArr[FB].style.visibility = "hidden";
       }
    }
    else
       this.SpkLabel.style.visibility = "hidden";

 } 

// works only for elements - Hidden true or false to be tried
// this.Items[ii].DomHand.style.visibility = "hidden";
// this.Items[this.Hybernate[ii]].DomHand.style.visibility = "visible";

//--------------------------------Distroying all elements --------------------------
  Distroy()
  {
    var Frame = this.Items[0].ItmName;

    for ( var ii=1 ; ii <= this.GenPtr; ii++)
    {
       if ( this.Items[ii].ParName == Frame ) {
          const myNode = this.Items[ii].DomHand;
          while (myNode.lastElementChild) {
             myNode.removeChild(myNode.lastElementChild);
          }
          myNode.parentNode.removeChild(myNode);
       }
    }
 }
//---GetParPos-------------------------------------------------------------------
 GetParPos(Child)
  {
       return  this.ArParPos(this.Items[Child].ParName);
 }     
//---ArrayPos-------------------------------------------------------------------
  ArrayPos(Itm)
  {
      var Pos=-1;
      for(var i=0;i<= (this.GenPtr);i++) 
      {
         if  (  (this.Items[i].ParName+","+this.Items[i].ItmName) == Itm) 
            {
              Pos =i;
              break;
            }
      }
      return Pos;
  }
 //------------------ Actual Grid no from GridItem-----------------------------    
    Get_Grd(TemPos)   
     {
       // Actual grid of an item
       // TemPos is the Gen pointer of an item of this Grid
      return  this.Items[TemPos].DomHand;
    }
 //------------------ Column ser no of a column in grid -------------------------------------------------------------    
   Get_Grd_Col(TemPos)   
     {
       //Tempos is the Gen pointer of this item which stores Col Seq no in DomHand 
      return this.Items[TemPos].DomHand;
    }
//------------------------------ Create_Grid_Fields--------------------------------------------- 
   Create_Grid_Fields (TemPos , Bar , ValSet)
     {
      var Grd   = this.Get_Grd(TemPos);         // Grid No
      var Panel = this.ArParPos(this.Items[TemPos].ParName);   // Panel subscript

      var Row = this.Grids[Grd].GrdShwRec;  
      var Col = this.Grids[Grd].GrdCno;
        
      var x=this.Grids[Grd].GrdXax; 
      var h=this.Grids[Grd].GrdHei / this.Grids[Grd].GrdShwRec;
      var y=this.Grids[Grd].GrdYax; 
      var w=this.Grids[Grd].GrdWid; 

      var OrgY = y;

      // It creates fields equal to the number of columns multiplied by the number of 
      // rows shown on the screen and the DomHand is added in GrdColDom of the Parent grid

      this.Grids[Grd].GrdFcr  = true;

      var d , Tp , Ftp , Fld , l , w, Loc;

      for ( var Ln = 1 ; Ln <= Row; Ln++ ) {
         x=this.Grids[Grd].GrdXax; 
 
         for ( var Cl = 1 ; Cl <= Col; Cl++ )  {
            Tp  = this.Grids[Grd].GrdColSer[Cl];
            d   = this.Items[Tp].DecimalArr;          
            Ftp = this.Items[Tp].CntTypArr;      
      	    Fld = this.Items[Tp].DfCmpArr;
            l   = this.Items[Tp].LengthArr;
            w   = this.Grids[Grd].GrdColWid[Cl]; 

//<IMP>coumn def cross ref is in Grids[DefGrd].GrdColSer[ColCnt]; 
// so unlike JIclient , DomHand is stored in Grid                        
// actdis and send flag is already there in grid
// so item is not used for grid screen items

            if (this.Grids[Grd].GrdHlp); 
               this.Items[Tp].ActDis = 3;
                                 
            Loc = Grd.toString().padStart(2,"0") + Cl.toString().padStart(2,"0") +
                  Ln.toString().padStart(2,"0") ;
   
            // if first line , add label 
            if ( Ln == 1 ) 
            {
               //Utils.Set_Color(LabelArr[Tp],"GRIDLAB");
               //Utils.Set_Font(LabelArr[Tp]);
               this.Create_Normal_label (Panel,Tp); //label hand is stored in definition
                   // of columns
               
               if (!Fld=="B") {
                  //IT WILL BE AGIN USED FOR SETTING LABEL ON THE BUTTON
                  this.Set_Location(X,Y,W,H,this.Items[Ptr].DomLabl) ;
                  this.Items[Ptr].DomLabl.style.visibility = "visible"
                  // Set_Label( x+1, y , FontArr[Tp] , Grids[Grd].GrdColLbl[Cl] , Tp);
                  //  <Why> this.Grids[Grd].GrdColLbl[Cl] ="";
               }

               // initialise the default value of S type list box of grid. 
               // this will be same in all records.there is no harm if it is set to null
               // for other objects . anyway we are using column as subsript.
               this.Grids[Grd].GrdLsdDfv[Cl]="";   
           }  // if Ln=1

           var DH = this.Create_Items(Fld,x,y,w,h,Tp,Panel,Loc)  

           if ( Ln == 1 )  { // if prompt is already received, show it
              var Tit = this.Grids[Grd].GrdColLbl[Cl]; 
              var DL  = this.Items[Tp].DomLabl;
                        
              if (Tit)
                 this.Prompt_Items ( DL,DH,x,y-22, 0 , Tit );  
           }

           this.Grids[Grd].SetGrdDom(DH,Cl,Ln)
           this.Grids[Grd].SetActDis(5,Cl,Ln) ;             

           x = x+w ;                   	        
         } // inner for   
         y=y+ h;
      }
       
      /*if (Bar=="H") {
           JScrollBar   Scroller[Gptr] = new JScrollBar(JScrollBar.VERTICAL,0,10,0,100)
           Scroller[Gptr].setValue(50);
           Scroller[Gptr].setMaximum (100);
           Scroller[Gptr].setMinimum (1);
           Scrolleer[Gptr].addAdjustmentListener(new AdjustmentListener())
           PanelArr[SwingPtr[Panel]].add(Scroller[Gptr]);
       }    
       */
   }
//---------------------------Normall label for all items-------------------------------
  Create_Normal_label (PosPar,Ptr) 
  {
     this.Items[Ptr].DomLabl = document.createElement("LABEL");  
     this.Items[Ptr].DomLabl.style.position = "absolute";
     this.Items[Ptr].DomLabl.style.visibility = "visible";
     this.Items[PosPar].DomHand.appendChild(this.Items[Ptr].DomLabl);
 }
//---------------------------Set Location for all items-------------------------------
  Set_Location(X,Y,W,H,Dom) 
  {                
    Dom.style.position = "absolute";
    Dom.style.left = X.toString() + "px";
    Dom.style.top = Y.toString() + "px";
    Dom.style.width = W.toString() + "px";
    Dom.style.height = H.toString() + "px";
 }
 // --------------------- Create Panel-------------------------------------------
 Create_Panel ( Xstr,Ystr,Wstr,Hstr,Ptr)
 {
    var x=Xstr , y=Ystr;

    this.Items[Ptr].DomHand = document.createElement("form");  
    if (this.PrgNo > 0) {
       if ( x < 130 )
          x = 130; 
 
       if ( y < 65 )
          y = 65;
    }                 

    // lable of panel should be attached to panel;
    document.body.appendChild(this.Items[Ptr].DomHand);
    this.Set_Location(x,y,Wstr,Hstr,this.Items[Ptr].DomHand);
    this.Create_Normal_label (Ptr,Ptr);

    // if Panel and last parameter of the definition is 0,
    // add 20 to both frame and panel to give space for Funkey label

    if (this.Items[Ptr].DecimalArr == 0)  {
       var nh = Hstr+20;
       this.Items[Ptr].DomHand.height = nh.toString() + "px";
       this.Create_SpecialKeys(0,Hstr-22,Wstr,22,Ptr);
    }
 }  
       /* Utils.Set_Color(PanelArr[Pptr] , "PANEL");  add it before the second bracket
       Utils.Set_Font(PanelArr[Pptr] );
       Utils.Set_Color(PanelArr[Pptr] , "PROMPT");
                if content type is toggle and F3 key is diabled, enable it 
       if (  Items[GenPtr].CntTypArr == ("T") &&  !(FunKeysSts[3] == 6) ) {
           this.FunKeysSts[3] = 6;
           this.FunKeysLbl[3] = "Toggle";  
       }  */
 // --------------------- Create Items other Than Panel-------------------------------------------
 Create_Items(Str,Xstr,Ystr,Wstr,Hstr,Ptr,PosPar,Loc)  
 {
    var DH;
    
    if (Str == "T" || Str == "D") {
       DH = document.createElement("INPUT")
       //((AbstractDocument) DomHand.getDocument()).setDocumentFilter(new DoctFilter(FTyp,l,d));
    
       if ( Str == "D")
          DH.setAttribute("type", "password");
       else
          DH.setAttribute("type", "text");      
    }
    else if (Str == "L") {
       DH = document.createElement("select")
       DH.setAttribute("type", "text");      
    }
    else if (Str == "K")  {
       DH = document.createElement("INPUT")
       DH.setAttribute("type", "checkbox");      
    }
    else if (Str == "B")
       DH =  document.createElement("button");

    // Stray label is treated as an indiviual item unlike label attached to 
    // items.  LablHand will be null for this item                

    else if (Str == "S")
       DH = document.createElement("LABEL");  
                    
    if ("TDLKBS".indexOf(Str) > -1 ) 
    {
       this.Items[PosPar].DomHand.appendChild(DH);                                            
       DH.addEventListener("change", Validate); 
       DH.addEventListener("focus", CurrLoc);
       DH.addEventListener("keydown", KeyTrap);
       DH.name = this.PrgNo.toString().padStart(3,"0") 
                    + this.Items[Ptr].ParName.padEnd(8, " ")  
                    + this.Items[Ptr].ItmName.padEnd(8, " ")+Loc;
       this.Set_Location(Xstr,Ystr,Wstr,Hstr,DH);
    } 
    return DH;
 }
    /*  <IMP> text only add it before return statement
    if ( Loc == ("000000") ) {  // contains number now
        // try setting the item name as element name 
         if ( ItmName == "DISPMESS") {
             DspPtr = GenPtr;
             Utils.Set_Color( Items[GenPtr].DomHand, "DISP");
         }  
         else {
            Utils.Set_Color( Items[GenPtr].DomHand ,  "ENTRY" );
            Utils.Set_Font( Items[GenPtr].DomHand );
         }                                 
         Items[GrnPos].DomHand.setVisible(true); 
         // setting visibility of grid field is done in grid fields.
         Utils.Set_Color( Items[GrnPos].DomHand , "PROMPT" );        
         Utils.Set_Font( Items[GrnPos].DomHand );
     else  {
        Utils.Set_Font( Items[GenPtr].DomHand);

     if ( GrdPrgHlp > 0 )     
          Utils.Set_Color( Items[GenPtr].DomHand ,  "HLPDISP" );                             
     else
        Utils.Set_Color( Items[GenPtr].DomHand,  "GRIDDISP" );                            
     }    */


//---------------------------Cmd_Define---------------------------------------
 Cmd_Define ( ObjStr , xStype , xParent , xChild , xXstr , xYstr,xWstr,xHstr,xLstr,xLDstr)  
 { 
       var    Str , Stype , Parent , Child , Loc;
       var    Xstr , Ystr , Wstr, Hstr, Lstr , LDstr , TemPos, DefGrd;
       
       if (ObjStr.length > 3) {
          Str     = ObjStr.substring(1,2);                    // Component type  1B
          Stype   = ObjStr.substring(2,3);                    // Content type    1B
          Parent  = ObjStr.substring(3,11);                   // Parname         8B      
          Child   = ObjStr.substring(11,19);                  // Itmname         8B
          Xstr    = parseInt(ObjStr.substring(19,23));// X axis          4B Decimal
          Ystr    = parseInt(ObjStr.substring(23,27));// y axis          4B Decimal
          Wstr    = parseInt(ObjStr.substring(27,31));// Width           4B Decimal
          Hstr    = parseInt(ObjStr.substring(31,35));// Height          4B Decimal
          LDstr  = parseInt(ObjStr.substring(38,39));
          Lstr   = parseInt(ObjStr.substring(35,38));
           
          if (Mnu != null)                                   
             Xstr    = Xstr + 150;

          if (Stype == ("D"))
             Lstr   = 10;
          else if (!(Stype == "N"||Str == "G"||Str == "P"))
             LDstr  = -1;
       }       
       else {
          Str     = ObjStr; Stype = xStype; Parent  = xParent; Child   = xChild;
          Xstr    = xXstr; Ystr= xYstr;  Wstr= xWstr; Hstr = xHstr; Lstr= xLstr; LDstr   = xLDstr;
       }

       this.GenPtr   = this.GenPtr + 1;
       this.Items[this.GenPtr] = Object.create(this.Widget);
       this.Items[this.GenPtr].ParName = Parent;
       this.Items[this.GenPtr].ItmName = Child;
       this.Items[this.GenPtr].DfCmpArr = Str; 
       this.Items[this.GenPtr].CntTypArr = Stype; 
       this.Items[this.GenPtr].LengthArr = Lstr;
       this.Items[this.GenPtr].DecimalArr = LDstr;
       this.Items[this.GenPtr].FontArr  = this.FontArr;
       this.Items[this.GenPtr].ActDis  = 5;
       this.Items[this.GenPtr].ActVal  = 4;
       //Items[GenPtr].SendFlg = false;

       if (Str == "F")  {
           /* There is no physical entity as FRame , however heirarchial connection of
              window downwards will remain. destoying winodows is done by fetching all
              logical forms ( panels) under the frame .      
              Form will be Panels , Group & Grids have no physical entity and 
              all the objects in these two will be attached to Form directly */
          this.CurrPos = 0;             
       }
       else if ( this.GenPtr > 0 ) {
          var TemPos  = this.ArParPos(Parent);
          var Attachto= this.Items[TemPos].ParName;
          var GrnPos  = this.ArParPos(Attachto);

          if ( TemPos==-1) 
             alert("Define - Wrong Parent---" + Parent );          
          else if (this.Items[TemPos].DfCmpArr == "G")  { 
             // Store the Fields under the Grid, to be created on getting a field
             // end Command
             var Grd = this.Items[TemPos].DomHand;
             var ColCnt = this.Grids[Grd].GrdCno + 1;
             this.Grids[Grd].GrdCno  = ColCnt;
             this.Grids[Grd].GrdColSer[ColCnt] = this.GenPtr; // cross ref to item 
             this.Items[this.GenPtr].DomHand   = ColCnt; // cross ref to item GrdColSer
             this.Grids[Grd].GrdColWid[ColCnt] = Wstr;   //  width of grid column
             this.Grids[Grd].GrdCntTyp[ColCnt] = Stype; //  This is stored both in Item and in Grid
             this.Grids[Grd].GrdCmpTyp[ColCnt] = Str;   //  This is stored both in Item and in Grid
             this.Grids[Grd].GrdActCol[ColCnt] = this.Items[this.GenPtr].ActDis ;
          }         
          else if (Str == "U") 
             this.Create_Normal_label (TemPos,this.GenPtr);
          else if (Str == ("G")) {
             this.Gptr = this.Gptr + 1;
             this.Grids[this.Gptr] = new Grid(Stype,Xstr,Ystr,Wstr,Hstr,Lstr,
                                                                  this.GenPtr,LDstr);
             //Genptr is sent as parameter as back Cross reference  
             //Lstr is the no of rows on screen
             // Here instead of DomHand , grid number is stored

             this.Items[this.GenPtr].DomHand = this.Gptr;        //forward Cross reference
             // Grid has no physical shape . In case any Caption is needed for the grid
             // a lable domhand is stored in item label field
             this.Create_Normal_label (TemPos,this.GenPtr);
             this.Items[this.GenPtr].DomLabl.style.visibility = "visible";
          }
          else  {
             // all the types mostly requires commom commands. 
             // so they are treated together, with exception handled where required        	
             // Since Group items U AND G are Virtual , items under these groups should
             // be added to the parent of the group                   

             if (Str == ("P"))
                this.Create_Panel(Xstr,Ystr,Wstr,Hstr,this.GenPtr)  
             else {
                // 3rd char of the location for group elements related to Help grid 
                // is set to 1.      

                var Loc3 = "000";
                if ( Str == "T"  && this.Grids.length > 1 ) {  // arr index 0 is not used for grids
                   for ( var G = 1; G < this.Grids.length ; G++)  {
                      if ( this.Grids[G].GrdHlp ) 
                           Loc3 = "001"
                   }
                }
                this.Items[this.GenPtr].DomHand = 
                this.Create_Items(Str,Xstr,Ystr,Wstr,Hstr,this.GenPtr,
                        GrnPos,Loc3+this.GenPtr.toString().padStart(3,"0"));                  

                if (Str != ("S"))   
                   this.Create_Normal_label (GrnPos,this.GenPtr);
             }
          }  // else of create alltypes
     }  // else of gen ptr check
  }  //function
// ---------------------------- Redefinition-------------------------------------
   Cmd_ReDef(ObjStr)
   {
    var TemPos, RPtr,Rval; 
    var RCar = ObjStr,  Parname , Itmname ,  Stype ,Str; 
    Str         = RCar.substring(1 ,2 );
    Stype       = RCar.substring(2 ,3 );
    Parname     = RCar.substring(3 ,11);
    Itmname     = RCar.substring(11,19);
    var Ln = RCar.length;
    RCar        = RCar.substring(21,Ln);

    TemPos      = this.ArrayPos(Parname+','+Itmname);

    if ( TemPos==-1) 
        alert("Redefine - Wrong item"+Parname+" "+Itmname);
    else 
    {	    
      if ( RCar.substring(0 ,1)=="E")
         {	
  	   if ( RCar.length < 2 )
       	        RCar = "NN";  

           this.Create_Grid_Fields(TemPos ,RCar.substring(0 ,1 ), RCar.substring(1 ,2 ));          	
              //parameter for Scroll bar , Allowing setting button label through value command
       }  	          
       else
         {
/*          while(!RCar=="")
           {
             var RPtr        = SwingPtr[TemPos] ;

             Rval = parseInt(RCar.substring(1,5));
            //<GRID> redefining of grid fields x y w h should be done under T and L 
            //     inside x y w h
            //  x y w h parameters of the grid itself should be done by checking whether it is a grid

            if (RCar.substring(0 ,1 )=="L")
              {
                CntTypArr [TemPos]   = Stype;                          
 
                if ( (Str=="T" && !Stype=="N") || !Stype=="D")
                   {
                    LengthArr[TemPos]   = parseInt(RCar.substring(1,5));
                }
                else
                  {  
                   LengthArr[TemPos]   = parseInt(RCar.substring(1,4));
                   DecimalArr[TemPos]   = parseInt(RCar.substring(4,5));          
               }
  
               if(Str=="T")
                  ((AbstractDocument) TextArr[RPtr].getDocument()).setDocumentFilter(new DoctFilter(Stype,
                                 LengthArr[TemPos],DecimalArr[TemPos]));
               else if(Str=="D")
                   ((AbstractDocument) PassArr.getDocument()).setDocumentFilter(new DoctFilter(Stype,
                                                     LengthArr[TemPos],DecimalArr[TemPos]));
            }
            else if(RCar.substring(0 ,1 )=="X"))
            {
              if(Str=="F"))
                 FrameArr.setLocation(Rval,FrameArr.getY());

              else if(Str=="P"))
                 PanelArr[RPtr].setLocation(Rval,PanelArr[RPtr].getY());

              else if(Str=="T")){
                 TextArr[RPtr].setLocation(Rval,TextArr[RPtr].getY());
                 wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
				 var x = TextArr[RPtr].getX()-wid;//added by jamshad		
				 LabelArr[TemPos].setLocation(x,TextArr[RPtr].getY());//added by jamshad
			  }
              else if(Str=="D")){
                            PassArr.setLocation(Rval,PassArr.getY());
                            var wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
			    var x = PassArr.getX()-wid;//added by jamshad		
							LabelArr[TemPos].setLocation(x,PassArr.getY());}//added by jamshad

              else if(Str=="B"))
                         ButtonArr[RPtr].setLocation(Rval,ButtonArr[RPtr].getY());    

              else if(Str=="L")){
                            ListArr[RPtr].setLocation(Rval,ListArr[RPtr].getY());
                            int wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
							int x = ListArr[RPtr].getX()-wid;//added by jamshad		
						    LabelArr[TemPos].setLocation(x,ListArr[RPtr].getY());//added by jamshad
			  }

              else if(Str=="K"))
                            CheckArr[RPtr].setLocation(Rval,CheckArr[RPtr].getY());

              else if(Str=="G"))
                            {// <GRID>  Redefinition grid
                            //GridARR[RPtr].setLocation(Rval,GridARR[RPtr].getY());
                            }
              }
              else if(RCar.substring(0 ,1 )=="Y"))
                {
                 if(Str=="F"))
                            FrameArr.setLocation(FrameArr.getX(),Rval);
                         else if(Str=="P"))
                            PanelArr[RPtr].setLocation(PanelArr[RPtr].getX(),Rval);
                 else if(Str=="T")){
							TextArr[RPtr].setLocation(TextArr[RPtr].getX(), Rval);
							int wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
							int x = TextArr[RPtr].getX()-wid;//added by jamshad		
							LabelArr[TemPos].setLocation(x,TextArr[RPtr].getY());}//added by jamshad
                 else if(Str=="D")){
                            PassArr.setLocation(PassArr.getX(),Rval);
                            int wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
							int x = PassArr.getX()-wid;//added by jamshad		
							LabelArr[TemPos].setLocation(x,PassArr.getY());}//added by jamshad
                 else if(Str=="B"))
                        ButtonArr[RPtr].setLocation(ButtonArr[RPtr].getX(),Rval);    
                 else if(Str=="L")){
                            ListArr[RPtr].setLocation(ListArr[RPtr].getX(),Rval);
                            int wid=LabelArr[TemPos].getText().length()*30;//added by jamshad
							int x = ListArr[RPtr].getX()-wid;//added by jamshad		
						    LabelArr[TemPos].setLocation(x,ListArr[RPtr].getY());//added by jamshad
						  }
                 else if(Str=="K"))
                             CheckArr[RPtr].setLocation(CheckArr[RPtr].getX(),Rval);
                 else if(Str=="G"))
                            {// <GRID>  Redefinition grid
                            //GridARR[RPtr].setLocation(Rval,GridARR[RPtr].getY());
                            }
              }
              else if(RCar.substring(0 ,1 )=="H"))
                  {
                         if(Str=="F"))
                            {
                             FrameArr.resize(FrameArr.getWidth(),Rval);
                            }
                         else if(Str=="P"))
                            {
                             PanelArr[RPtr].resize(PanelArr[RPtr].getWidth(),Rval);
                             SpkLabel.setLocation(0,Rval-60);
                             SpkLabel.setHorizontalAlignment(SwingConstants.CENTER);
                             PanelArr[RPtr].revalidate();
                            }
                         else if(Str=="T"))
                            TextArr[RPtr].resize(TextArr[RPtr].getWidth(),Rval);
                         else if(Str=="D"))
                            PassArr.resize(PassArr.getWidth(),Rval);
                         else if(Str=="B"))
                            ButtonArr[RPtr].resize(ButtonArr[RPtr].getWidth(),Rval);
                         else if(Str=="L"))
                            ListArr[RPtr].resize(ListArr[RPtr].getWidth(),Rval);  
                         else if(Str=="K"))
                            CheckArr[RPtr].resize(PanelArr[RPtr].getWidth(),Rval);

                         else if(Str=="G"))
                            {// <GRID>  Redefinition grid
                            //GridARR[RPtr].setLocation(Rval,GridARR[RPtr].getY());
                            }

              }
              else if(RCar.substring(0 ,1 )=="W"))
                        {
                         if(Str=="F"))
                            FrameArr.resize(Rval,FrameArr.getHeight());
                         else if(Str=="P"))
                            PanelArr[RPtr].resize(Rval,PanelArr[RPtr].getHeight());
                         else if(Str=="T"))
                            TextArr[RPtr].resize(Rval,TextArr[RPtr].getHeight());
                         else if(Str=="D"))
                            PassArr.resize(Rval,PassArr.getHeight());
                         else if(Str=="B"))
                            ButtonArr[RPtr].resize(Rval,ButtonArr[RPtr].getHeight());
                         else if(Str=="L"))
                            ListArr[RPtr].resize(Rval,ListArr[RPtr].getHeight());
                         else if(Str=="K"))
                            CheckArr[RPtr].resize(Rval,PanelArr[RPtr].getHeight());
                         else if(Str=="G"))
                            { // <GRID>
                            //GridARR[RPtr].resize(Rval,GridARR[RPtr].getHeight());
                           }
              }
              RCar        = RCar.substring(5,RCar.length());
           } */
           var remainingbracket =3                     
        } 
      }
    }
//---------------------------Update_Frame---------------------------------------
  Update_Frame(TemPos,ActDisp,Attr,Aval,Albl)              
  {
     var Cut = false;

     // since frame has no physical entity, we jhave to do action on panels
     // under the frame. start from Frame +1 and exit when parent is not frame
     for ( var ii = TemPos+1; ii < this.GenPtr; ii++)  {
        if ( this.Items[ii].ParName != this.Items[TemPos].ItmName)
           break;     

        if (ActDisp==0 || ActDisp==1)
           this.Items[ii].DomHand.style.visibility = "hidden";

        else if (ActDisp > 1 && ActDisp < 6 )
           this.Items[ii].DomHand.style.visibility = "visible";        
           //if ( Attr ==1 )
                //Utils.Set_Color(FrameArr, Albl);    
        else if (ActDisp==6)  {
           //  Since the class itselt will be offered for garbage collection. 
           // Release grid classes        
      
           for (var Ln = 1; Ln < Grid.length ; Ln++) {              
               this.Grids[Ln] = null;
           }
           //<IMP> Remove items
           // Release grid classes        
           //     for (var Ln = 1; Ln <= 15 ; Ln++)                
           //         Formulas[Ln] = null;
           Cut = true;
        }         
     }  
        /*       if (ActDisp==0 || ActDisp==1)
                FrameArr.setVisible(false);
        
             else if (ActDisp > 1 && ActDisp < 6 )  {
                FrameArr.setVisible(true);
        
                if ( Attr ==1 )
                 Utils.Set_Color(FrameArr, Albl);
            
             }  
             else if (ActDisp==6)  {
               //  Since the class itselt will be offered for garbage collection. 
               // Release grid classes
        
                for (var Ln = 1; Ln <= 10 ; Ln++)               
                   Grids[Ln] = null;

                // Release grid classes
        
                for (var Ln = 1; Ln <= 15 ; Ln++)                
                    Formulas[Ln] = null;

             }  
*/    

  }

//---------------------------Update_Panel---------------------------------------
 Update_Panel (TemPos,ActDisp,Attr,Aval,Albl)
  {
    if (ActDisp == 1)
       this.Items[TemPos].DomLabl.style.visibility = "hidden";
    else if (ActDisp > 1 && ActDisp < 6 )
       this.Items[TemPos].DomHand.style.visibility = "visible";
    else if (ActDisp==6)
       this.Items[TemPos].DomHand.removeAll();
    /*if ( Attr ==1 )
       Utils.Set_Color(PanelArr[Actptr] , Albl);*/            
  }
//---------------------------Update_Grid_Field---------------------------------------
 Update_Grid_Fields(ParPos,TemPos,RecNo,ActDisp,Attr,Aval,Albl)    
 {  
 // 1. Coming from group_field update . Recno = 0 . Should go to all rows 
 // 2. Group field but with specific recno . should update only that record

   var  StLoop=RecNo, MxLoop=RecNo, Grd=0 , Col=0, ScrRec = 0;

   //grd is used here as  grid no
   Grd  = this.Items[ParPos].DomHand;                        
   // Set act variable      
   Col  = this.Get_Grd_Col(TemPos);
   
   if (RecNo == 0) {
      for ( var Ind=0; Ind <= this.Grids[Grd].GrdRno ; Ind ++)  { 
            this.Grids[Grd].SetActDis(ActDisp,Col,Ind)  
      }    
      MxLoop = this.Grids[Grd].GrdShwRec ;
      StLoop = 1;
   }
   else
      this.Grids[Grd].SetActDis(ActDisp,Col,RecNo) ;               

   var Dh;

   //--- Action on Screen
   for ( var Ind = StLoop ; Ind <= MxLoop ; Ind ++)  {         	
       Dh = this.Grids[Grd].GrdDomRsc (Col,Ind);
       this.Update_Items (Dh,TemPos,ActDisp,Attr,Aval,Albl)
   }         
 }                 
//---------------------------Update_TextField---------------------------------------
 Update_Items (Dh,TemPos,ActDis,Attr,Aval,Albl)
 {
   var Dhl = this.Items[TemPos].DomLabl;

   if (ActDis < 2 )    {
      Dh.style.visibility = "hidden";
      Dhl.style.visibility = "hidden";
   }
   else if  (ActDis > 3 ) {
      Dh.style.visibility = "visible";
      Dh.disabled = false;
      Dhl.style.visibility = "visible";
   }
      // Fly help should be created after setting the width          
   else if (ActDis==6) {
      FlyWidth = this.Items[TemPos].LengthArr *  10;                    

      if ( Attr == 0 && Albl.length() > 0)  {
              FlyWidth = 10 * parseInt(Albl);
              Create_FlyHelp(TemPos);
      }              
   }
   else {
      //<IMP> 2 and 3 should be differentiated with focusable
      Dh.style.visibility = "visible";
      Dh.disabled = true;
      Dhl.style.visibility = "visible";

/* <IMP>      if ( Albl.length() > 0 ) {
            switch ( Attr ) {
               case 1:
                  Utils.Set_Color(TextArr[Actptr] , Albl);
                  break;
               case 2:
                  Utils.Set_Font(TextArr[Actptr]  , Albl);
                  break;
               case 3:
                  Utils.Set_Color(LabelArr[Iptr] , Albl);
                  break;
               case 4:
                  Utils.Set_Font(LabelArr[Iptr]  , Albl);
                  break;     
         }              
      }*/
   }
 }
//-----------------------------------------Action -------------------------------------
   Cmd_Action ( xParname , xItmname , xRecNo, xActDisp, xAttr , xAval, xAlbl )  
    {
      var Attr,Aval,Alen=0,RecNo,ActDisp;
      var Parname , Itmname ,Albl="";
      // Annexed commands . 1. Flyhelp - width of field
      // function key - lebels

      if (xParname.length > 10) {
         Parname = xParname.substring(1,9);                    // Blkname     8B  
         Itmname = xParname.substring(9,17);                   // Varname     8B  
         RecNo   = parseInt(xParname.substring(17,22));// Recnumber   5B  Decimal  
         ActDisp = parseInt(xParname.substring(22,23));// Disp/Act/Format 1B  Decimal
         Attr    = parseInt(xParname.substring(23,24));// Attribute   2B  Decimal
         Aval    = parseInt(xParname.substring(24,25));
         Alen    = parseInt(xParname.substring(25,28));

         if  ( Alen > 0 )
             Albl= Parname.substring(28,28+Alen);    
      }
      else {
         Parname = xParname;                    // Blkname     8B  
         Itmname = xItmname; 
         RecNo   = xRecNo;
         ActDisp    = xActDisp;
         Attr    = xAttr;
         Aval    = xAval;
         Alen    = Alen;
         Albl    = xAlbl;
      }

      // if no parent and item is not frame . it is functon key
      if (Parname==("        ") && 
         (Itmname.substring(0,1)=="F" || Itmname.trim()=="ESCAPE" ||      
          Itmname.trim()=="PAGEDOWN"  || Itmname.trim()=="PAGEUP")||
          Itmname.trim()=="DELETE")
          {
          // HOME and END are used by windows to goto the beg and 
          // end of a field. so it is not used here
          // to chenge color or font of fk label it comes with F with out FK number

          var FunVal=0;

          if (Itmname.trim()=="ESCAPE")
             Itmname = 'F0';
          else if (Itmname.trim()=="PAGEUP")
             Itmname = 'F13';
          else if (Itmname.trim()=="PAGEDOWN")
             Itmname = 'F14';
          else if (Itmname.trim()=="DELETE")
             Itmname = 'F2';
  
          if (Itmname.substring(0,1)==("F"))
          {
            if ( Itmname.length > 1) {
               FunVal = parseInt(Itmname.substring(1,Itmname.length));
               this.FunKeysSts[FunVal] = ActDisp;
          }
            else {
               if ( !Utils.Button) {
                  if ( Attr == 3)
                     this.SpkLabel.style.color = Albl; 

                  if ( Attr == 4)
                     Utils.Set_Font( SpkLabel , Albl);
               }               
            }  
            if(Aval ==9   && Albl.length > 0  )
             {
              this.FunKeysLbl[FunVal] = Albl;  
             }                          
          }
          this.SpcKey_Lbl();                      
       }
       else {
          var AType,TemPos;   
          var TemPos   = this.ArrayPos(Parname+","+Itmname);
          var ParPos   = this.ArParPos(Parname);
    
          if ( TemPos==-1 ) 
              alert("Action - Wrong item" + Parname+" "+Itmname );
          else {
             if ( ActDisp > 0)
                this.Items[TemPos].ActDis = ActDisp;

             if ( Aval > 0)
                this.Items[TemPos].ActVal = Aval;

             if (this.Items[TemPos].DfCmpArr==("F")) 
                this.Update_Frame(TemPos,ActDisp,Attr,Aval,Albl);              

             else if (this.Items[TemPos].DfCmpArr==("P"))
                this.Update_Panel(ParPos,TemPos,ActDisp,Attr,Aval,Albl);

             else if (this.Items[ParPos].DfCmpArr==("G") && this.Items[TemPos].GomHand!="NaN")
                this.Update_Grid_Fields(ParPos,TemPos,RecNo,ActDisp,Attr,Aval,Albl);    

             else
                this.Update_Items(this.Items[TemPos].DomHand,TemPos,ActDisp,Attr,Aval,Albl);
           }
      }  	 
   }
//-----------------------------------Prompt of Items-------------------------------------
  Prompt_Items ( Dl , Dh, Xstr, Ystr, Hstr , Tit )  
   {
      var x=Xstr, y=Ystr, w=0;

      if (x==0) {
         x = parseInt(Dh.style.left);  
         x = x-Tit.length*10 ;
       }

      if (y==0)
         y = parseInt(Dh.style.top);  

      w = 10*Tit.length;
      Dl.style.left       = x.toString() + "px";
      Dl.style.top        = y.toString() + "px";
      Dl.style.width      = w.toString() + "px";
      Dl.style.height     = "22px";
      Dl.style.fontFamily = "courier,sans-serif";
      Dl.style.fontWeight = "bold";
      Dl.innerHTML=Tit;
  }
//-----------------------------------------Prompt -------------------------------------
   Cmd_Prompt ( xParname , xItmname , xXstr, xYstr, xHstr , xTit,recno )  
    {
      var Parname , Itmname ,  Tit ; 
      var Xstr,Lstr , Ystr, Hstr , TemPos ,ParPos,K,wid; 
   
      if (xParname.length > 10) {    
         Parname = xParname.substring(1,9);                    // Blkname        8b      
         Itmname = xParname.substring(9,17);                   // Varname        8b
         Xstr    = parseInt(xParname.substring(17,21));// X axis         4B  Decimal
         Ystr    = parseInt(xParname.substring(21,25));// y axis         4B  Decimal
         Hstr    = parseInt(xParname.substring(25,27));// Font size      2B  Decimal
         Lstr    = parseInt(xParname.substring(27,30));// Length of text 3B  Decimal
         Tit     = xParname.substring(30,30+Lstr);             // value  Text
      }
      else {
         Parname = xParname;                    // Blkname     8B  
         Itmname = xItmname; 
         RecNo   = xRecNo;
         Xstr    = xXstr;
         Ystr    = xYstr;
         Hstr    = xHstr;
         Tit     = xTit;
      }
      
      if (Tit)  {
         TemPos = this.ArrayPos(Parname+","+Itmname);                       
         ParPos  = this.ArParPos(Parname);

         if (TemPos==-1) 
            alert ("Prompt - Wrong item" + Itmname  + Parname);
         else 
         {	    
       	    //FontArr[TemPos] = Hstr;     
       	    if (this.Items[TemPos].DfCmpArr == ("P"))
               {
                  if(Xstr==0) {
                     wid= parseInt(this.Items[TemPos].DomHand.style.width)/2;  
                     wid = wid-Tit.length*20/2    //Text.length*30;
                      Xstr = wid;
                  }          
                  wid = 20*Tit.length;
                  this.Items[TemPos].DomLabl.style.left = Xstr.toString() + "px";;
                  this.Items[TemPos].DomLabl.style.top  = Ystr.toString() + "px";;
                  this.Items[TemPos].DomLabl.style.width = wid.toString()+"px";
                  this.Items[TemPos].DomLabl.style.height = "30px";
                  this.Items[TemPos].DomLabl.style.fontFamily = "courier,sans-serif";
                  this.Items[TemPos].DomLabl.style.fontSize = Hstr;
                  this.Items[TemPos].DomLabl.style.fontWeight = "bold";
                  this.Items[TemPos].DomLabl.style.fontSize = "xx-large";
                  this.Items[TemPos].DomLabl.innerHTML=Tit;
             }
             // F doesnot have physical entity
             else if (this.Items[TemPos].DfCmpArr == ("F"))
             {
               var a='11';
               //K = ArParPos(GetParPos(TemPos));
               //this.Items[K].title = Tit;
              } 
             else if (this.Items[ParPos].DfCmpArr == ("G"))
             {
               var Grd = this.Items[ParPos].DomHand;  //this is grid number

               if ( this.Grids[Grd].GrdFcr ) {
                  // if gridfields created set the prompt just like normal field
                  var Ptr = this.Items[TemPos].DomHand; 
                  var Dh = this.Grids[Grd].GrdDomRec(Ptr,1);     
                  var x=this.Grids[Grd].GrdXax; 
                  var y=this.Grids[Grd].GrdYax;

                  while ( Ptr > 1 ) {
                     x = x + this.Grids[Grd].GrdColWid[Ptr-1];
                     Ptr--;
                  } 
                  this.Prompt_Items(this.Items[TemPos].DomLabl ,Dh, x, y-22, Hstr , Tit); 
               }
               else   // store it in Grid
                  this.Grids[Grd].GrdColLbl[this.Items[TemPos].DomHand] = Tit; 
             }
             else 
             {
               this.Prompt_Items ( this.Items[TemPos].DomLabl ,this.Items[TemPos].DomHand, Xstr, Ystr, Hstr , Tit ); 
             }
          }   // else of tempos    
      }  // tit 
  }    	
//-----------------------------------------Action -------------------------------------
   Cmd_Others_P()
   {
     if ( !this.SetPos) {
        Ln = this.Items.length;
        for ( var Ps = 1; Ps < Ln ; Ps++) {
           if ("TLBKSD".indexOf(this.Items[Ps].DfCmpArr) > -1 && 
                       this.Items[Ps].ActDis > 2)    {
              this.CurrPos = Ps;
              break;
           }
        }
        this.SetPos = true;
     }

     this.PreBlock = this.Items[this.CurrPos].ParName;
     var Ppos   = this.ArParPos(this.PreBlock);
     var ii     = 0;

     if (this.Items[Ppos].DfCmpArr == ("G"))
        this.Grids[this.Items[Ppos].DomHand].Grd_OP(LastKey);  
     else 
     {
        var Hit = false;
        for (var ii = this.CurrPos+1 ; ii <= this.GenPtr ; ii++) {
           if (this.Items[ii].ActDis > 3) {
               Hit = true;
               break;
            }
           if ( this.Items[ii].ParName != this.PreBlock) 
              break;     
        }
        if ( !Hit) {
           for ( ii = 0; ii <= this.CurrPos;  ii--) {
               if (this.Items[ii].ActDis > 3 && this.Items[ii].ParName == this.PreBlock){
                  Hit = true;
                  break;
               }
           }
        }
        /*if (LastKey == 38 ) {
           this.CurrPos = this.CurrPos - 1;
           if (this.CurrPos < MinPos)
              this.CurrPos = MaxPos;
        }
        else {
           this.CurrPos = this.CurrPos + 1;
           if (this.CurrPos > MaxPos)
              this.CurrPos = MinPos;
        }*/

        this.CurrPos = ii;
        this.Items[this.CurrPos].DomHand.focus();
        this.SetPos = true;
     }
  }
//-----------------------------------------Action -------------------------------------
  Cmd_Locate(xParname , xItmname ,xRecNo)   
   {
     var RecNo;
     var Parname,Itmname;                  
                  
     if ( xParname.length > 10)  {            
        Parname = xParname.substring(1,9);                    //Blkname           8b      
        Itmname = xParname.substring(9,17);                   //Varname           8b     
        RecNo   = parseInt(xParname.substring(17,22));//Recnumber 5B Decimal 
     }
     else {
        Parname = xParname;                    //Blkname           8b      
        Itmname = xItmname;                     //Varname           8b     
        RecNo   = parseInt(xRecNo);            //Recnumber 5B Decimal 
     }
     
     var ActPtr=0,IPos,PPos=0;
     var Tp="", Loc="000000";                  

     IPos = this.ArrayPos(Parname+","+Itmname);

     if ( IPos==-1) 
        alert ("Locat - Wrong item" + Parname+" "+Itmname);
     else 
     {	    
       PPos    = this.ArParPos(Parname);
       // <GRID> refine movement by asserting next/prev/first/last  editable item
       // IMPORTANT -- Itemname Should not be a Group item
                    
       ActPtr = this.Items[IPos].DomHand;
                    
       if (!(Itmname.trim()))  // Null Item
          {
           // item name is spaces. Used for going prev , next , first , or last fields
           //  it can also be used to locate to a grid while cursor is outside the grid
           // GRID: record 0 means ,the previous current item of the grid
           //<IMP>                                     
           var FstItem="",LatItem="";

           for (var iC=0;  iC <= this.GenPtr ;  iC++) 
           {
              if (this.Items[iC].ParName==Parname)
                 {
                   if (FstItem==(""))
                      FstItem=this.Items[iC].ItmName;
                   LatItem=this.Items[iC].ItmName;
                 }
           }

           if (RecNo== -1)
              Itmname=this.Items[this.CurrPos-2].ItmName;
           else if(RecNo== -2)
              Itmname=this.Items[this.CurrPos].ItmName;
           else if(RecNo== -3)
              Itmname= FstItem;
           else if (RecNo == -4)
              Itmname= LatItem;
           else
              Itmname= FstItem;
   
           IPos = this.ArrayPos(Parname+","+Itmname);
        
           if ( IPos > -1) 
              ActPtr = this.Items[IPos].DomHand;
        }  // if of not null

        if ( IPos==-1) 
           alert ("Locate - Wrong item" + Parname+" "+Itmname);
        else 
        {	    
          Tp  = this.Items[IPos].DfCmpArr;

          if (this.Items[PPos].DfCmpArr==("G")) {   // parent is a grid
            // Grid number is stored in DomHand where as for all others it will be object
            // Similarly DomHand of item is the col ser no
            this.Grids[this.Items[PPos].DomHand].Grd_Locate(Itmname.substring(0,6) , ActPtr , RecNo);
          }
          else
          {
            this.Items[IPos].DomHand.focus();
            this.CurrPos   = IPos;
            this.SetPos    = true;

            // if locate Command is received in a Screen conatining Grid 0,
            //    ( first 3 character of Loc in name = "001")
            // Set the first line of the Grid 0 in selected colour. 

            if ( this.Items[IPos].DomHand.name.substring(19,22)=="001")  {
               for ( var G = 1; G < this.Grids.length ; G++)  {
                  if ( this.Grids[G].GrdHlp ) {
                     this.Grids[G].Set_Row_color("HLPSEL",1,0);
                     this.Grids[G].GrdCurRsc = 1;
                  } // if
               }  // for 
            }  // if
          }   // else                     
        }  // else of inner Ipos
    }  // else of first Ipos   
 } 
//------------------------------------------------Set Value  V ---------------------------------------------------------                       
  Set_Value(ToSet,ItmPos,RecordNum )   
     {
      var defChk=null, DefVal=null, Done=false;
      var ActPtr = 0, Cl , PapPos =0 , Gno=0 , TmpPos=ItmPos , 
          RecNo=RecordNum;
            	            	
      var Pappa  = this.Items[TmpPos].ParName;                       
      var PapPos = this.ArParPos(Pappa);
      var Gno    = this.Items[PapPos].DomHand;
      var Dh     = this.Items[TmpPos].DomHand;
      var Dl     = this.Items[TmpPos].DomLabl;

      /* --------------------------- Setting Value in Flyhelp Grid-----------------------------------------
      *If the fields Actdis = 6 and its flyhelp field is visible, the value should go to 
      *the flyhelp field.Otherwise it should goto the original text field
      --------------------------------------------------------------------------------------
      if ( this.Items[TmpPos].DfCmpArr == "T"  && this.Items[TmpPos].ActDis[TmpPos]==6 )
         && ActDis[GetFlyPos(TmpPos)] > 1 ) {
         	
         if (ToSet.substring(0,1)=="~")                      	
       	    ToSet = ToSet.substring(1,ToSet.length());
         else {	 	        
            PapPos = GetFlyParPos(TmpPos);	
            TmpPos = GetFlyPos(TmpPos);
         
            Gno = SwingPtr[PapPos];
            Dh  = SwingPtr[TmpPos];
      
            RecNo = Grids[Gno].GrdRno + 1;
        }    
      }
      <IMP>      will be done third satge 

      if (this.Items[PapPos].DfCmpArr=="G" && RecNo == -1 && ToSet=="N") {
          this.GrdRecPnd[Dh] = true; 
          Done = true; // Done all that is required
      } 
      */
               
      if ( this.Items[PapPos].DfCmpArr=="G")  
       {         
         // Trap memory overflow
         if (  RecNo < 300 )
            this.Grids[Gno].Grd_Set_Values(ToSet,this.Items[TmpPos].DomHand,RecordNum );
         else
            alert("Memory overflow . Please search for records intstead of using DownARR and PageDown");

      }  // Grid
      else if ( Dh && (this.Items[TmpPos].DfCmpArr=="T" || ToSet ) ) 
      {
         if (this.Items[TmpPos].DfCmpArr=="P")
            Dl.innerHTML = ToSet; 
            
         else if (this.Items[TmpPos].DfCmpArr=="B")
            Dh.innerHTML = ToSet;
            
         else if (this.Items[TmpPos].DfCmpArr=="T")
            Dh.value = ToSet;
            
         else if (this.Items[TmpPos].DfCmpArr=="K")
             Dh.value=ToSet.toLowerCase;

         else if (this.Items[TmpPos].DfCmpArr=="L")
         {
            defChk = ToSet.substring(0,1);  
            DefVal = ToSet.substring(1,ToSet.length);

            if(defChk=="~")
               Dh.value = DefVal;
               //    Dh.prop('selected', true); alternative
            else
            {
               var option = document.createElement("option"); // set name same as value
               option.value = ToSet;
               option.text  = ToSet;
               Dh.appendChild(option);
               //Dh.add(option)  alternative
               //<IMP>if (!(Dh.prop('selected')))  correct later          
               //   Dh.setSelectedIndex(0);
            } 
         }
         /*else if (DfCmpArr[TmpPos]=="S")  {
             if ( CntTypArr[TmpPos]=="V"))  {        
    	        String[] lettersArr = ToSet.split("");
    	        DefVal = "<html>";
   	   	         
                for (String letter : lettersArr) {
                    DefVal = DefVal + letter + "<br>" ;
                }
                DefVal =  DefVal + "</html>";                
          }
          else if (DfCmpArr[TmpPos]=="F")
          {
            FrameArr.setTitle(ToSet); frame is virtual
             FrameTitle =ToSet;
          } */        
      }     
  }       
///---Delete entry from Item With SubComponent having one selection -------------
     Delete_Entry(Pos,InItPo)
     {
       var Par =0 , Sel;
       Par = this.ArParPos(this.Items[Pos].ParName);	
       
       if ( this.Items[Pos].DfCmpArr=='L') {
          if (this.Items[Par].DfCmpArr=="G")  
             this.Grids[this.Items[Par].DomHand].Grd_Del_Ent(this.Items[Pos].DomHand,InItPo);  //Column_number     
          else 
          { 
            Sel = this.Items[Pos].DomHand;      
            for (var i = 0 ; i < Sel.length ;  i++) {
               if ( InItPo == i+1 || InItPo == 0 )
       	            Sel.remove(i);
             }
          } 
       }
  }  
// ------------------------------  Leaf item clearing ------------------------   
     Clr_Leaf_Itm(Pos)
     {     	 
         var Irec=0 ;
         Irec = this.ArParPos(this.Items[Pos].ParName);
       
         if (this.Items[Irec].DfCmpArr=="G")  
            this.Grids[this.Items[Irec].DomHand].Grd_Clr_Leaf(this.Items[Pos].DomHand);  //Column_number     
         else 
          {
            if ( this.Items[Pos].DfCmpArr=="T") 
               this.Items[Pos].DomHand.value = "";
            else
               this.Items[Pos].DomHand.innerHtml= "";
            // list will not handled here
         }
     }     
//---Clr Item---------------------------------------------------------------------
// Clearing the screen item. If Item is a parent , every thing under the item is cleared 
// except list item and check box item
// If Item is blank , par is taken as the item

     ClrItm(Par, Itm, Sub)
     {
      var Pos, Typ , Nam;
      
      // if item is null then get the item by iterating 
      //.other wise check the type of the item and it single    
      if ( Itm == "        ") {
         Pos = this.ArParPos(Par);
         Nam = Par;
      }   
      else  {
         Pos = this.ArrayPos(Par+','+Itm);
         Nam = Itm;
      }    
      
     if ( Pos==-1) 
           alert ("Wrong item in Clear item command--> " + Par+" "+Itm);
     else 
     {	        
      Typ = this.Items[Pos].DfCmpArr;             

      if ( "FPU".indexOf(Typ) > -1 )  {
         for(var iC=0; iC<=this.GenPtr; iC++)  {            	      	
             if (this.Items[iC].ParName==Nam && this.Items[iC].DfCmpArr == "F")
                this.ClrItm(Nam,this.Items[iC].ItmName,0);

             else if (this.Items[iC].ParName==Nam && this.Items[iC].DfCmpArr == "P")
                this.ClrItm(Nam,this.Items[iC].ItmName,0);
     
             else if (this.Items[iC].ParName==Nam && Typ == "U")
                 this.Clr_Leaf_Itm(iC);
         }                 
      }    
      else if ( Typ == "G") 
         this.Grids[this.Items[Pos].DomHand].Grd_Clr_Grd(0);
      else  {
         Pos = this.ArrayPos(Par+','+Itm);         
         if ( Pos > 0 )  
            this.Clr_Leaf_Itm(Pos);                  
      }    
    }
  }  
//------------------------Check Status of Special Keys -------------------------
CheckFunStat(KeyInx)
{
  var K=0;

  if (KeyInx > 111 && KeyInx < 124)
      K = KeyInx - 111;

  if ( this.FunKeysSts [K]==6 )
     return true;
  else
     return false; 
}
//----------------Create Special Keys Button Equivalents------------------------ 
Create_SpecialKeys(x,y,w,h,Ptr) 
     {           
       this.FunPanWid = w;

       if ( this.PrgNo == 0) {
         this.FunKeysSts [0 ] = 1;  //"ESCAPE" ; 
         this.FunKeysSts [1 ] = 1;  // "F1"     ;  
         this.FunKeysSts [5 ] = 1;  // "F5"
      }
      else {
         this.FunKeysSts [0 ] = 6;  //"ESCAPE" ; 
         this.FunKeysSts [1 ] = 6;  // "F1"     ;  
         this.FunKeysSts [5 ] = 6;  // "F5"
      }
      this.FunKeysSts [2 ] = 1;  // "F2"
      this.FunKeysSts [3 ] = 1;  // "F3"
      this.FunKeysSts [4 ] = 1;  // "F4"
      this.FunKeysSts [6 ] = 1;  // "F6"
      this.FunKeysSts [7 ] = 1;  // "F7"
      this.FunKeysSts [8 ] = 1;  // "F8"
      this.FunKeysSts [9 ] = 1;  // "F9"
      this.FunKeysSts [10] = 1;  // "F10"
      this.FunKeysSts [11] = 1;  // "F11"
      this.FunKeysSts [12] = 1;  // "F12" 

      this.FunKeysLbl [0 ] = "Back"    ;
      this.FunKeysLbl [1 ] = "List Of Values"   ;
      this.FunKeysLbl [2 ] = "Del"       ;
      this.FunKeysLbl [3 ] = "Find"   ;
      this.FunKeysLbl [4 ] = "Ins"       ;
      this.FunKeysLbl [5 ] = "Cancel" ;
      this.FunKeysLbl [6 ] = "Approve";
      this.FunKeysLbl [7 ] = "Inner"  ;
      this.FunKeysLbl [8 ] = "OK"       ;
      this.FunKeysLbl [9 ] = "Print"  ;
      this.FunKeysLbl [10] = "Update" ;
      this.FunKeysLbl [11] = ""       ;
      this.FunKeysLbl [12] = ""       ;
      

      // This Routine Should Be Run Only Once In Program
      if (Utils.Button) {
         var X = x,strt=1;  
         // Create fucntion key buttons, if util.Button is true
         if (Utils.ButtEsc)
             strt=0
         var FB = 0, FK=0;
         for ( FB=strt; FB < 11 ; FB++) {    //F0 is escape F1 is Help.
               //Show button eq.to F2 to F12.subscript here is 2 lass than actual                                                          
   	    //this.FuncButtArr[FB].setHorizontalAlignment(SwingConstants.CENTER);	        
            this.FuncButtArr[FB] = document.createElement("button");
            this.FuncButtArr[FB].style.position = "absolute";
            this.FuncButtArr[FB].style.left     = X.toString() + "px";
            this.FuncButtArr[FB].style.top      = (y+10).toString() + "px";
            this.FuncButtArr[FB].style.width    = "90px";
            this.FuncButtArr[FB].style.height   = "20px";
            this.FuncButtArr[FB].onclick = FuncButts;       
            FK = FB + 11; 

            if ( FB==0  ) {
               if (Utils.ButtEsc)
                  this.FuncButtArr[0].name = this.PrgNo.toString().padStart(3,"0") + "2700000";
            }
            else
               this.FuncButtArr[FB].name = this.PrgNo.toString().padStart(3,"0")    
                  + FK.toString()+"00000";

            this.Items[Ptr].DomHand.appendChild(this.FuncButtArr[FB]);            
            this.FuncButtArr[FB].style.color = "Red"; 
            this.FuncButtArr[FB].style.background = "Yellow"; 
            this.FuncButtArr[FB].type="button";
            this.FuncButtArr[FB].innerHTML=this.FunKeysLbl[FB];
            //Utils.Set_Font(this.FuncButtArr[FB]);
            X = X + 70;                   
         }  // for loop 	
         this.SpcKey_Lbl();      
     }
     else  {
        //SpkLabel.setHorizontalAlignment(SwingConstants.CENTER);
        this.SpkLabel = document.createElement("LABEL"); 
        this.SpkLabel.style.position = "absolute";
        this.SpkLabel.style.left     = x.toString() + "px";
        this.SpkLabel.style.top      = (y+10).toString() + "px";
        this.SpkLabel.style.width    = "90px";
        this.SpkLabel.style.height   = "20px";
        this.SpkLabel.style.visibility = "visible"
        this.Items[Ptr].DomHand.appendChild(this.SpkLabel);            
        this.SpkLabel.style.color = "Red"; 
        this.SpkLabel.style.background = "Yellow"; 
        this.SpkLabel.style.fontFamily = "courier,sans-serif";
        this.SpkLabel.style.fontWeight = "bold"
        //this.SpkLabel.type="Lable";
        this.SpcKey_Lbl() ;
        //Utils.Set_Font( this.SpkLabel );
     }      
  }
//----------------------Concatenate Special KeyPrompt--------------
   SpcKey_Lbl()  
     {
      if (Utils.Button) {
	 var x=0,Wid=0,FB = 0,strt=1;
            
         if (Utils.ButtEsc)
            strt=0;

         for (FB=strt; FB < 11 ; FB++) {    //F0 is escape F1 is Help.  F13 and F14 are up and down .
            if (this.FunKeysSts[FB] == 6)
               x = x+100;  
         }
      	                      
      	 x = (this.FunPanWid-x)/2;     
      	          	          
         for ( FB=strt; FB < 11 ; FB++) {    //F0 is escape F1 is Help.  F13 and F14 are up and down .                                                  // so button is needed only for F2 to F12. Arr subscript is 2 lass than actual                                                           
            if ( ( this.FunKeysSts[FB] == 6 && FB > 0 ) ||
               ( Utils.ButtEsc && this.FunKeysSts[0]==6 && FB==0 ) ) {
               this.FuncButtArr[FB].style.left       = x.toString() + "px";
               this.FuncButtArr[FB].style.visibility = "visible"
               // ??? Added for label
               this.FuncButtArr[FB].innerHTML=this.FunKeysLbl[FB];
               x = x + 100;         
            }
            else
               this.FuncButtArr[FB].style.visibility = "hidden";
         }  // For
      }
      else 
      {
         var Lbl="Esc";       
         for(i=1;i<=14;i++)
         {
            if (this.FunKeysSts[i]==6) 
            {
               if (i>=1 && i<=12)
                  Lbl =Lbl+", F"+i+"="+this.FunKeysLbl[i]; 
               else
                  Lbl =Lbl+", "+this.FunKeysLbl[i]; 
            }

      	    x = (this.FunPanWid-x)/2;     
            this.SpkLabel.style.left = x.toString() + "px";
            this.SpkLabel.innerHTML=Lbl;
         } 
    }  
  } 
}       
//-------------------------End of program class-------------------------- 
//---------------------------------- Analyse commands----------------------------
function Analyse(FromMw) {
   var SrvStr = FromMw;
   const Cmd = "DRTALVFMOSP";
   var FstCar;
   var mark;
   var Stype;
   var Str;
   var Opeyed = false;
   var ToSrv  = false;

   //Waiting = false;  // server synchronisation flag;

   while( SrvStr != "" )   {
     //try {
        FstCar = SrvStr.substring(0,1);
        mark   = Cmd.indexOf(FstCar);

        if (mark < 0) {
           alert(SrvStr.substring(0,20)+"**Command Charater Missing " );
           SrvStr = "";               
        }

        //<IMP>implemet P later

        //---Definition command------------------------------------------                 
        if(FstCar=="D")
          {
            Stype   = SrvStr.substring(0,39);
            SrvStr  = SrvStr.substring(39,SrvStr.length);

            Programs[CurrPrg].Cmd_Define(Stype);
         }               
         //--- Redefinition R -----------------------------------
         else if(FstCar=="R")
         {
            mark        = Number(SrvStr.substring(19,21));
            //length of string after namer and number 2B     Decimal
            Stype       = SrvStr.substring(0,21+mark);
            SrvStr      = SrvStr.substring(21+mark,SrvStr.length);                  
            Programs[CurrPrg].Cmd_ReDef(Stype);                  
         }
         //---Set Prompt  T ----------------------------------------------
         else if(FstCar=="T")
            {    
              mark    = parseInt(SrvStr.substring(27,30),10); 
              // Length of text 3B  Decimal
              
              Stype   = SrvStr.substring(0,30+mark);            
              SrvStr  = SrvStr.substring(30+mark,SrvStr.length); 
                  
              Programs[CurrPrg].Cmd_Prompt(Stype);    
          }   
          //---Set Value  V------------------------------------------------
          else if(FstCar=="V")
          {
              // in the case of pending data , no need for calling methods of client objects
              var StrIdx  = parseInt(SrvStr.substring(22,27));//Length of text 5B     Decimal
              var Parname = SrvStr.substring(1,9);   //Blkname           8b      
              var Itmname = SrvStr.substring(9,17);  //Varname           8b   
              var TemPos  = Programs[CurrPrg].ArrayPos(Parname+","+Itmname);

              mark    =  parseInt(SrvStr.substring(17,22));
              var Val =  SrvStr.substring(27,27+StrIdx);
                  
              // Data Pending 
              if (  mark == -1 ) 
              {                                       
                 if ( Val == ("I"))  
                 { 
                    // check and make it last command
               	    if (SrvStr.length == 27 + StrIdx )  
                    { 
                       SrvStr  = SrvStr.substring(27+StrIdx,SrvStr.length);
                       ToSrv = true;

                       if (   DfCmpArr[TemPos] == ("G")  )          
         
                          Stype = Seqno+CurrPrg.string().padStart(3,'0')+
                             Parname.padEnd(8,'0')+Itmname.padEnd(8,'0')+
                             Programs[CurrPrg].Grids[mark].GrdRno.toString.padStart(5,"0")+
                             '82'+"";                             
                       else
                          Stype = Seqno+CurrPrg.string().padStart(3,'0')+
                             Parname.padEnd(8,'0')+Itmname.padEnd(8,'0')+"00000"+'82'+"";                             
                          break;
                    }    
                    else
                       SrvStr  = SrvStr.substring(27+StrIdx,SrvStr.length)  +
                                 SrvStr.substring(0,27+StrIdx);                      	    
               	  }
                  else  
                  {
                     TemPos = Programs[CurrPrg].Items[TemPos].DomHand;
                     Programs[CurrPrg].Grids[TemPos].GrdRecPnd = true;
                     SrvStr  = SrvStr.substring(27+StrIdx,SrvStr.length);
                  }    
              }	                  
              else
              {
                 SrvStr  = SrvStr.substring(27+StrIdx,SrvStr.length);
                 Programs[CurrPrg].Set_Value( Val , TemPos , mark);
                 Programs[CurrPrg].Items[TemPos].DomHand.value = Val; 
              } 
          }                 
          //---Menu Command  M --------------------------------------------          
          else if (FstCar=="M")
          {           
             Str     = SrvStr.substring(1,2);                                                                                          

               if (Str == 'C' || Str == 'E')  // MC Start of menu or ME End of Menu
              {
                 if (Str == 'C' )
                    Mnu = new Menu(Programs[0].Items[0].DomHand); 
   
                 SrvStr   = SrvStr.substring(2,SrvStr.length);
                 Mnu.MenuCmd(Str,"","");   	
              }
             else
              {                         	
                 Stype = SrvStr.substring(2,4);
                 mark  = parseInt(SrvStr.substring(4,7));
                 Itmname = SrvStr.substring(7,mark+7);   
                 //  MSLM003LMS  -- MS system LM systemcode length 3 LMS title
                 //  MM!"025.....-- MM Menu   !" Id length 25 Titel
                 //  MP@#010.....   MP Prog   @# Id Length 25 Title
        
                 Mnu.MenuCmd(Str,Stype,Itmname);
   	
                 mark = mark+7;     

                 if ( SrvStr.length > mark )  
                    SrvStr  = SrvStr.substring(mark,SrvStr.length);
                 else
                    SrvStr  = "";      
              }
          }  
          //---Action Command A--------------------------------------------
          else if(FstCar=="A")
           {
              // function key is followed by label. Label length can be zero or more
                  
              var Alen = parseInt(SrvStr.substring(25,28)) + 28 ;                  
              Stype = SrvStr.substring(0,Alen);                  
              SrvStr  = SrvStr.substring(Alen,SrvStr.length);
              // Cmd_action is not returning anything . the why this check ???    
              if (Programs[CurrPrg].Cmd_Action(Stype))
                  Programs[CurrPrg] = null;  
          }   
          //--- Locate Cursor  L-------------------------------------------
          else if(FstCar=="L")
          {
            Stype  = SrvStr.substring(0,22);
                 
            if ( Opeyed )  {
               Opeyed = false;
               SrvStr  = SrvStr.substring(0,SrvStr.length-2);                     
            }

            SrvStr  = SrvStr.substring(22,SrvStr.length);
            Programs[CurrPrg].Cmd_Locate(Stype);    
          }
          //---Other Commands O -------------------------------------------
          else if(FstCar=="O")
          {
             Stype= SrvStr.substring(1,2);

             if (Stype == "E") 
             {
                var ButCnt = parseInt(SrvStr.substring(2,3));     
                mark   = parseInt(SrvStr.substring(3,6));
                Str    = SrvStr.substring(6,mark+6);
                var k  = parseInt(SrvStr.substring(mark+6,mark+9));
                var Hd = SrvStr.substring(mark+9,mark+9+k);      
                mark   = mark+9+k;
                k = parseInt(ButCnt);

                if ( k==0)
                    k=1;

                var BM = SrvStr.substring(mark,mark+k*8); // all 3 but name 3*8

                if ( SrvStr.length > mark+k*8 )
                   SrvStr = SrvStr.substring(mark+k*8,SrvStr.length);
                else
                   SrvStr = "";

                if (k==1)
                   alert("Just alert:--> " + Str);
                else {
                   var Cnf = confirm(Str);
                   if (Cnf) 
                      Str = BM.substring(0,8);
                   else
                      Str = BM.substring(8,16);
                   To_Server(Seqno + Pg.toString().padStart(3,"0") + 
                      "ERROR   " + Str + "0000010") ;
                }                    
             }            
             else if(Stype == "K") 
             {              
               // now Ok is used only on return from lookup as last command.
               // If genralisation is needed,if SrvStr is not empty , call toserver and dont break.
               SrvStr  = SrvStr.substring(2,SrvStr.length);                                                      
               var stlen = HelpStack.length;
               var p = Programs[CurrPrg].CurrPos;
               var x = Programs[CurrPrg].Items[p].DomHand;
               var z = x.name;

               // if more than one item is to be set, all are set before sending the 
               // first item to server. rest are to be sent on user key press

               for ( var sl=0; sl < stlen; sl++) {                
                  var Val     = HelpStack[sl];
                  Programs[CurrPrg].Set_Value( Val , p+sl , 0); //current record
               }

               HelpStack = [];
               var y = x.value;   
               z = StoreLoc (z,x);
               Stype   = Seqno+z +'10'+y;           
               ToSrv = true; 
               break;
             }
             else if (Stype == "F") {
                if ( SrvStr == "OF")
                     SrvStr = ""; 
                else
                   SrvStr  = SrvStr.substring(2,SrvStr.length);     
             }     		
             else if (Stype == "P") {  
                // if Op or Of Comes in the middle of SrvStr, take it to the end
                // and if any commnad which effects location is found, take it off from SrvStr 
                    
                var Bl = SrvStr.length;
                     
                if ( Bl > 2)  {                     
                   SrvStr  = SrvStr.substring(2,Bl); 
                   if (!Opeyed)
                      SrvStr = SrvStr + "OP";                         
                   Opeyed = true;  
                } 
                else
                {
                   SrvStr  = "";    
                   Opeyed = false;
                   Programs[CurrPrg].Cmd_Others_P();
                }                      
                Stype = "";
             }
             else if (Stype=="R")
             {  
               SrvStr  = SrvStr.substring(2,SrvStr.length);     

               if ( Opeyed )  {
                  Opeyed = false;
                  SrvStr  = SrvStr.substring(0,SrvStr.length-2);                     
               }
                       
               var Myath = CurrPrg;
               Shift_Program(Myath , Programs[CurrPrg].PrePrg, true); 
             }
             else if (Stype=="I")
             {  
                if ( Opeyed )  {
                  Opeyed = false;
                  SrvStr  = SrvStr.substring(0,SrvStr.length-2);                     
                }

                mark     = SrvStr.indexOf(','); 
                Parname  = SrvStr.substring(2,mark);
                Parname  = Parname.padEnd(8,' ');
                SrvStr   = SrvStr.substring(mark+1,SrvStr.length);

                mark     = SrvStr.indexOf(',');
                Itmname  = SrvStr.substring(0,mark);
                Itmname  = Itmname.padEnd(8,' ');
                SrvStr  = SrvStr.substring(mark+1,SrvStr.length);     

                Programs[CurrPrg].ClrItm(Parname,Itmname,0) ;
             }
             else if (Stype=="G")
                {                       
                  var K=0;
                     
                  if ( Opeyed )  {
                     Opeyed = false;
                     SrvStr  = SrvStr.substring(0,SrvStr.length-2);                     
                  }
                  mark     = SrvStr.indexOf(','); 
                  Parname  = SrvStr.substring(2,mark);
                  Parname  = Parname.padEnd(8,' ');
                  SrvStr   = SrvStr.substring(mark+1,SrvStr.length);
   
                  mark     = SrvStr.indexOf(',');
                  Itmname  = SrvStr.substring(0,mark);
                  Itmname  = Itmname.padEnd(8,' ');
                  SrvStr   = SrvStr.substring(mark+1,SrvStr.length);
                     
                  mark     = SrvStr.indexOf(',');
                  TmpStr   = SrvStr.substring(0,mark);
                  SrvStr   = SrvStr.substring(mark+1,SrvStr.length);                          

                  TemPos   =  Programs[CurrPrg].ArrayPos(Parname+","+Itmname);
                  K        =  DomHand[TemPos];
                     
                  //Check if it is a 2 Dim Grid. If so this is a clear command for one subscript
                  //Other wise the next parameter is a second dime grid
                  if (  Grids[K].Check2Dim() )   // it is 
                     ClrItm(Parname, Itmname, parseInt(TmpStr)); 
                  else  {
                     TmpStr   =  TmpStr.padEnd(8,' ');
                     TemPos   =  Programs[CurrPrg].ArrayPos(Parname+","+TmpStr);
                     TemPos   =  DomHand[TemPos];
                    
                     // Set the original grid as related to a 2 Dim Grid
                     Grids[K].Add_Relation(TemPos);
                     	
                     // Setthe  Grid as 2 Dim
                     Grids[TemPos].Second_Dim ();                      	
                  }
              }
             else if (Stype == "D")
                    {  
                     mark     = SrvStr.indexOf(','); 
                     Parname  = SrvStr.substring(2,mark);
                     Parname  = Parname.padEnd(8,' ');
                     SrvStr   = SrvStr.substring(mark+1,SrvStr.length);
                     
                     mark     = SrvStr.indexOf(',');
                     Itmname  = SrvStr.substring(0,mark);
                     Itmname  = Itmname.padEnd(8,' ');
                     SrvStr   = SrvStr.substring(mark+1,SrvStr.length);
                
                     mark     = SrvStr.indexOf(',');
                     var ElNum= parseInt(SrvStr.substring(0,mark));

                     SrvStr  = SrvStr.substring(mark+1,SrvStr.length);     
                     Mark    = Programs[CurrPrg].ArrayPos(Parname+','+Itmname);
          
                     if ( Mark==-1) 
                        Show_Error ("Delete - Wrong item" + Itm);
                     else
                        Programs[CurrPrg].Delete_Entry(Mark,ElNum);
                  }
             else if (Stype == "S") 
                    {                     
                     /*block this for Testing AWT thread problem 
                     if(!OmRec)
                       {  
                        UPDSrv.set_disp_var( Get_Disp_Fld());
                        OmRec= true; 
                       }*/ 
                     SrvStr  = SrvStr.substring(2,SrvStr.length);     
                   }
             else if (Stype == "Q")
                    {                       
                     Clean_And_Exit();
                     break;
                    }
             else if (Stype == "A") 
             {
                var PrePrg  = CurrPrg;
                CurrPrg = parseInt(SrvStr.substring(2,5));     
                SrvStr  = SrvStr.substring(5,SrvStr.length);

                if ( PrePrg != CurrPrg )
                   Shift_Program ( PrePrg , CurrPrg,false);
             }
             else
             {
                SrvStr  = SrvStr.substring(2,SrvStr.length);     
             }
          }   
          //----Formula Command F------------------------------------------                       
          else if (FstCar == "F")
          {	
              mark = parseInt(SrvStr.substring(20,24));  //Format Byte 1B  Decimals
              Formula_Parse( SrvStr.substring(0,mark+24)) ;
              SrvStr  = SrvStr.substring(mark+24,SrvStr.length);
          }              
          //--- Print Command P --------------------------
          /*else if (FstCar == "P") 
          {
            var Stype;
            ToSrv = false;
            // if a local client print 
            if  (ClientPrint  && (Programs[CurrPrg]=="P" || SrvStr.substring(19,20)=="P" ) ) {
                 int Sport = 100;
                 String Shost="BLAH";
                 --get  host it seems a lengthy to find it
                 --add  Type(1)+lenght of Shost(3) ,  Shost,  sport(6), program(2) to srvstr
                 Stype = "B"+Shost.length().string().padStart(3,'0') + Shost + 
                      Sport.length().string().padStart(6,'0') +  CurrPrg.string().padStart(2,'0');
                  
                 try {
                     var xPrint = new XMLHttpRequest();
                     xPrint.open("POST" , ClientPrint+SrvStr, true);
                     xPrint.send();

                     if  (this.readyState == 4 && this.status == 200) {
                         Stype =  this.responseText;
                         Stype = Seqno+CurrPrg.string().padStart(3,'0')+"PRINT<<<"+"        "+
                                            Stype+'82'+"";                             
                         ToSrv = true;
                     }
                     else
                         Stype = '...........';
                 }
                 catch {
                      alert( "cannot connect to server");
                 }
            }
            else { 
                if (SrvStr.substring(1,2) == "P")  {
                   var Lvl = Programs[CurrPrg].PrintLevel;                
                   // if this is a drill down report, suppress the previous report

                   if (Lvl > -1 && !Programs[CurrPrg].PrintCls[Lvl].PageDest = "S";
                       Programs[CurrPrg].PrintCls[Lvl].CleanPage();
                      
                   Lvl++;
                   Programs[CurrPrg].PrintCls[Lvl] = new Report(CurrPrg);
                   Programs[CurrPrg].PrintLevel = Lvl;
                }
                Stype = Programs[CurrPrg].PrintCls[Programs[CurrPrg].PrintLevel].ActPrt(SrvStr);

                 //if call back req , then send call back code. This is received as
                 //PAEC. Only C is passed back

                 if  ( Stype == "C" )    {     	
                     Stype = Seqno+CurrPrg.string().padStart(3,'0')+"PRINT<<<"+"        "+"00000" +'85'+"";
                     ToSrv = true;
                 }
                 else if ( Stype.substring(0,1) == 'P') {   
                     // Data pending. Call for more data  , Record number should containg the 
                     // token received
                     Stype = Stype.substring(1,Stype.length); 
                     Stype = Seqno+CurrPrg.string().padStart(3,'0')+"PRINT<<<"+"        "+
                                            Stype+'82'+"";                             
                     ToSrv = true;
                  }
            }
            break;                           
          } */     
/*     }   // try
       catch(ee)
       {
             var mess=ee.toString()+" --->>> "+Stype;
             alert("Client-->" + mess);
             SrvStr = "";

       }   */
    }  

    if (ToSrv) 
       ToServer(Stype);          
}
//------------------------- End of Class Program ---------------------
//doc filter ?  
// ---------------------- Event Listener of Report -------------------   
 function PageSelect(e) 
     {
      var KeyInx = e.keyCode || e.which;
      var x = e.target;
      var y = x.value;
      var z = x.name;
      var WhereFrom = Programs[CurrPrg].PrintCls[Programs[CurrPrg].PrintLevel];
      var LastPg = WhereFrom.PageNo;

      if (KeyInx == 27) 
       {
         var PipeDown = WhereFrom.Eop;
         var Lvl = Programs[CurrPrg].PrintLevel-1;
         WhereFrom.CleanAll();
  
         // Show the current screen of previous level; 
         if ( Lvl > -1) {
            Pag = Programs[CurrPrg].PrintCls[Programs[CurrPrg].PrintLevel].CurPag;
            Programs[CurrPrg].PrintCls[Lvl].WriteScreen(Programs[CurrPrg].PrintCls[Lvl].CurPag); 
         }
         // distroy latest print instance and decrement level count
         Programs[CurrPrg].PrintCls[Programs[CurrPrg].PrintLevel] = null;
         Programs[CurrPrg].PrintLevel--;

         // if print end command is not received, ask middle ware to stop sending
         // print data

         if (!PipeDown)
             Stype = Seqno+"PRINT<<<"+"        "+"-0001"+"82"+"";                             

         /*WhereFrom.Terminated =  true;
         if (WhereFrom.Eop && WhereFrom.Frame_Created) {
            WhereFrom.Frame_Created = false;
         } */  
      } 
      else if ( (KeyInx > 32 && KeyInx < 37 ) || KeyInx == 10 || KeyInx == 13) 
       {
         var Tmp = WhereFrom.CurPag;
         var TmpOld = Tmp;

         if (KeyInx ==34) 
      	    Tmp = Tmp+1;

         else if ( KeyInx ==33)
     	    Tmp = Tmp-1;

         else if(KeyInx ==36)
     	    Tmp =1;

         else if (KeyInx ==35)
     	    Tmp = LastPg;

         else if (KeyInx ==10 || KeyInx == 13) 
               Tmp=parseInt(WhereFrom.JumpNo.value);

         if (Tmp > LastPg)
            Tmp = LastPg; 

         if (Tmp < 1)
            Tmp = 1;

         if ( TmpOld != Tmp )  
          {
     	    WhereFrom.WriteScreen(Tmp);
            WhereFrom.CurPag = Tmp;
         }
      }
      /*else if (KeyInx ==120) 
        {
          stp=parseInt(PagNoFrom.value), 
          edp=parseInt(PagNoTo.value);
          RptPrinter Report = new RptPrinter(PageData , VarFonn,  VarWght, VarFons ,  Vartype , VarForm, VarWide  ,this.UntCon, Utils); 
          Report.CreatePrint(stp,edp,PageHight, PageWidth, Rotate , GetName, PageOutp,  Copies );
          
         }
       else if (KeyInx ==121)
         {
          stp=parseInt(PagNoFrom.value), 
          edp=parseInt(PagNoTo.value);
          CreateFile(stp,edp);
       }  */
  }
// --------------------------------------- drill down button listener ------------------------------------     
 function DrillDown(e) {
   var x = e.target;
   var z = x.name;
   // 3 Program 8 Buttname Lineno
   var LiNo = parseInt(z.substring(11,z.length));
   var Prg  = z.substring(0,3);
   var Butt = z.substring(3,11);
   var WhereFrom = Programs[parseInt(Prg)].PrintCls[Programs[parseInt(Prg)].PrintLevel];

   if ( WhereFrom.Eop) {     
      if ( LiNo > -1 ) {
          var chr = String.fromCharCode(9);
          var Dat  = WhereFrom.LineData[LiNo];
          Dat = Dat.replaceAll(chr,'%09');
          Dat = Seqno+Prg+"PRINT<<<"+Butt+"00000"+'81'+Dat.substring(1,Dat.length);
          ToServer(Dat);
      }    
   }
   else 
      alert("This report cannot be drilled before completing the process of receiving data of this report");     
}        
// -------------------------- Events Listener of menu buttons-------------------- 
// MenuTrap traps key press on menu buttons
// Validate traps change on Items
// CurrLoc traps Focus gain
// KeyTrap  traps Function Key Press
// FuncButts traps buttons representing  Function keys

function MenuTrap(Evnt) {
   var alerted = false;

   for ( var G = 1; G < Programs[CurrPrg].Grids.length ; G++)  {
      if ( Programs[CurrPrg].Grids[G].GrdHlp ) {
         alert("Please goback from lookup screen by pressing ESC key before shifting to any other program");
         alerted = true;
         break;
      }
   }

   if ( alerted )   
      return;

   var x = event.target;
   var z = x.name;
   var Fst = "*";
   var Scn = "*";

   // SeqNo + Prog + Parent .  z = Type+System +'10'+Id
   if  ( z == 'ELOGOUT<<' ) {
      Clean_And_Exit(Seqno+'000'+z.substring(1,z.length));
      // Logout name is ELOGOUT<< 
   }
   else if  (z.substring(0,1) == 'S') 
      Mnu.ShowMenu(parseInt(z.substring(1,z.length),10),'S');

   else if ( z.substring(0,1) == 'M' )
      Mnu.ShowMenu(-1,z);

   else if ( z.substring(0,1) == 'P' ) {
      var Hit=0;

      for ( var ii=1; ii<=PrgPtr; ii++)
       {
         if (ProgStat[ii] < "X"  && Programs[ii].MenuChar == z.substring(1,z.length) )
          {

            if ( CurrPrg == ii )
                 alert ( "Please see the screen in front of you");
            else
                 Shift_Program(CurrPrg , Programs[ii].PrgNo , false);

            Hit = ii;
            break;
          }       
       }

       if ( Hit == 0 )          
       {
          SentChar = z.substring(1,z.length);
          // Creates problem. it cuts off beginning from #
          Fst = z.substring( z.length-2,z.length-1);
          Scn = z.substring( z.length-1, z.length);
          Fst  = z.substring(1,z.length-2)+ Fst +Scn

          if  (Fst == "#" )
               Fst = "%33"; 

          if  (Scn == "#" )
               Scn = "%33"; 

          ToServer(Seqno+'000GRIDMENU' + Fst);
       }
   }
}
// ---------------------- Event Listener of Program -------------------   
function Validate(Evnt) {
   var x = event.target;
   var y = x.value;
   var z = x.name;
   
   // To stop firing the chage event after handling this in windows
   if (!KeyTrapped) {
      z = StoreLoc (z,x);
      ToServer(Seqno+z +'10'+y);
   }
   else
      KeyTrapped = false;
}

function CurrLoc(Evnt) {
   var x = event.target;
   var z = x.name;
   z = StoreLoc (z,x);   
}
// ----------------------------- Key Trap-----------------------------------------
function KeyTrap(e) {
   var KeyInx = e.keyCode || e.which;
   var x = e.target;
   var y = x.value;
   var z = x.name;  

   // To stop firing the chage event after handling this in windows
   if (KeyInx == 13) {
      KeyInx = 10;
   }
   KeyTrapped = true;

   // Check for help grid related text field (Loc = "001'). 
   // Here the focus is on a single field outside the help grid. 
   // Hanlding  search variables of programs having help grid.
   // Warning: It should not change CurrPos. 
   // If Record shifting keys, shift record and set KeyInx to 0 to stop foloow through
   // If F10 and 10 , send values of Help grid variable having actdisp = 3 while 
   //    and Leave KeyInx unchanges to follow through to send values of the event variable
   // if F3  Dont do anything
 
   if ( z.substring(19,22)=="001")  {
      var shft = false, psh = false; 

      if (KeyInx == 40 || KeyInx == 38 || KeyInx == 33 || KeyInx == 34 )
          shft = true;
      else if ( KeyInx == 121 || (KeyInx == 10 && y < " "))
          psh = true;
 
      for ( var G = 1; G < Programs[CurrPrg].Grids.length ; G++)  {
         if ( Programs[CurrPrg].Grids[G].GrdHlp ) {
            var sc=Programs[CurrPrg].Grids[G].GrdCurRsc;  
            // Record No of the Help Grid on screen

            if ( psh)  {  // Push grid values to Stack implemented by array HelpStack
               var ky , gval , fath , child , pg = z.substr(0,3);
               for( var cl=1; cl<=Programs[CurrPrg].Grids[G].GrdCno; cl++) {
                  ps = Programs[CurrPrg].Grids[G].GrdColSer[cl] ;
                  if (Programs[CurrPrg].Items[ps].ActDis == 3) {
                     gval  = Programs[CurrPrg].Grids[G].ScrGetVal (cl , sc);
                     HelpStack.push(gval);
                  }
               } 
            }

            if ( shft ) {    // Shift record
                Programs[CurrPrg].Grids[G].Record_Shift ( sc , KeyInx , 0 ) ;
                KeyInx = 0;
                break;
             }
         }
      }
   }
   
   if (KeyInx == 27)
      ToServer(Seqno+CurrPrg.toString().padStart(3,"0") + " ".padStart(21,"0") + 
         KeyInx.toString().padStart(2,"0"));

   else if (KeyInx==9||KeyInx==10|| KeyInx==33|| KeyInx==34||KeyInx==37||KeyInx==38||            KeyInx==39||KeyInx==40)
   { 
     z = StoreLoc (z,x);   
     ToServer(Seqno+z +KeyInx.toString().padStart(2,"0")+y);
   }
   else if (KeyInx > 111 && KeyInx < 124) 
    {   
     // Function keys
     if ( Programs[PrgPtr].CheckFunStat(KeyInx)) {
        LastKey = KeyInx;           
        z = StoreLoc (z,x);   
        if ( KeyInx > 100 )
              KeyInx = KeyInx - 100;             
        ToServer(Seqno+z + KeyInx.toString().padStart(2,"0") + y);
    }
    e.stopPropagation()
        /*ToServer(Seqno + CurrPrg.toString().padStart(3,"0") + 
        Programs[CurrPrg].Items[Loc].ParName.padEnd(8," ") + 
        Programs[CurrPrg].Items[Loc].ItmName.padEnd(8," ") +
        "00000" + Fk.toString().padStart(2,"0") );  */
   }            
}
// ------------------------------- Func Butts------------------------------------
function FuncButts(Evnt) {
   var x = event.target;
   var z = x.name;

   var Pg   = z.substring(0,3);
   var Fk   = z.substring(3,5);    
   var PgNo = parseInt(Pg);
   var Pos  = Programs[PgNo].CurrPos;   
   var Rc = Programs[PgNo].GetCurRec();

   z = Seqno + Pg +
       Programs[PgNo].Items[Pos].ParName.padEnd(8," ") + 
       Programs[PgNo].Items[Pos].ItmName.padEnd(8," ") +
       Rc + Fk ;

   ToServer(z);
}
//----------------------------- Shift program ------------------------
function Clean_And_Exit(Prm) 
{
      if ( Mnu ) {
         var x = Mnu.MenuDistroy();
         Mnu = null;
         ToServer(Prm);
      }

      var Prg = PrgPtr;
      while ( Prg >= 0 && ProgStat[Prg] == "A") {
         var y = Programs[Prg].Distroy();
         Programs[Prg]=null;
         Prg--;
      }

      Programs = null;
      ProgStat = null;
      CurrPrg = -1;
      Utils = null;
      document.body.innerHTML = "Loggeded   Out";   
      window.close();
  }
//--------------------------Shift Program----------------------------------
 function Shift_Program(Pre , Curr , Back)
  {
    if (Curr > PrgPtr || ProgStat[Curr] == "X")
     {
       if ( Curr > PrgPtr )
          PrgPtr = Curr;

       Programs[Curr] = new program(PrgPtr);
       Programs[Curr].MenuChar = SentChar;
    }
    else if ( Curr > 0 )
       Programs[Curr].Show();

    CurrPrg = Curr;
    ProgStat[Curr] = "A";

    if (Back) {   // OR Command
       Programs[Pre].Distroy();
       Programs[Pre]=null;
       ProgStat[Pre] = "X";
    }
    else
    {
       if ( Pre > 0  &&  ProgStat[Pre] == "A")   
          // Log in and menu should not be suppressed
        {
          Programs[Curr].PrePrg = Pre;
          try {    
             ProgStat[Pre] = "P";
             Programs[Pre].Hide();
          }
          catch {}
       }
     }
 }	   
// -------------------------- Store Location ------------------------
function  StoreLoc(IndStr,Dh) {
   CurrPrg = parseInt(IndStr.substring(0,3));
   var   z = IndStr.substr(0,19);
   var Loc = IndStr.substr(19,25).padStart(6,'0');
   var  It = IndStr.substr(11,19);
   var  Pr = IndStr.substr(3,11)

   // in grid , 2 digits each for Gridno , column , record
   // normal 2 digits 0 , 4 digits for position in Items
   if ( Loc.substring(0,2) == "00" ) 
   {
     Programs[CurrPrg].CurrPos = parseInt(Loc.substring(3,6));
     Loc = "00000";
   }
   else
    {
     var Grd = parseInt(Loc.substring(0,2)); 
     Programs[CurrPrg].GrdCur  = Grd; 

     var Cl = parseInt(Loc.substring(2,4)); 
     Programs[CurrPrg].Grids[Grd].GrdCurCol = Cl;
     Programs[CurrPrg].CurrPos = Programs[CurrPrg].Grids[Grd].GrdColSer[Cl];

     var Rw = parseInt(Loc.substring(4,6));
     Programs[CurrPrg].Grids[Grd].GrdCurRsc = Rw;
     Rw  = Programs[CurrPrg].Grids[Grd].ScrToRec(Rw);

     if ( Programs[CurrPrg].Grids[Grd].GrdRno < Rw)
        Programs[CurrPrg].Grids[Grd].GrdRno = Rw;

     Loc = Rw.toString().padStart(5,"0"); 
   }   
   return (z+Loc)
}
// ---------- Send validation to server and receive command from server----------------
function ToServer(Valid) {
    if ( Waiting )
       alert("waiting for server");

    //<IMP>   SendFlg[Ptr] = true;
    try {
       var xhttp = new XMLHttpRequest();
       xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
             Waiting = false;             
             Analyse ( this.responseText);
          }
       }
    }
    catch {
         ( "cannot connect to server");
    }

    xhttp.open("GET" , Valid, true);
    Waiting = true;
    xhttp.send();
}

function start() {
  PrgPtr = -1;

  for ( var ii=0; ii  < 25; ii++)
     ProgStat = ["X"] ;       

  Utils = new JIUtils();
  ToServer(Seqno);
}

// Since menu program is only 1,keeping menu out side the class will save memory of menu
// in all other classes
// When access is allowed to diff programs simultaneousely, it is a problem to 
// identify the item on whcih event is created. So name attribute will be set for
// all the elements on whcih event is expected. 
// Format
// 3 digit zero filled Program no 8 char parent 8 char child 5 digit zero-filled rec.no
// PrgNo variable and PrgName variables inside the class will be set on instantiation 
// Sever sends a program code before the first command, to enable JS to 
// determine, for which program the commands are
// SEQNO: received seq no first five is seq no and next three is the 
// subscript of array which stores the client details;
      

HelpStack= [];
Programs = ["x"] ;       
ProgStat = ["X"] ;       
PrgPtr = -1;
LastKey = -1;
CurrPrg = -1;
Waiting = false;
Mnu    = null;
Utils  = null;
SentChar = "*";
ClientPrint = "http://127.0.0.1:6666/";
KeyTrapped = false;
Seqno = "10000000";  
window.onload = start;

</script>
</body>
</html>
